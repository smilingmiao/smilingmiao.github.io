<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>smilingmiao</title>
  
  
  <link href="https://github.com/smilingmiao/atom.xml" rel="self"/>
  
  <link href="https://github.com/smilingmiao/"/>
  <updated>2022-08-21T05:18:52.395Z</updated>
  <id>https://github.com/smilingmiao/</id>
  
  <author>
    <name>smilingmiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>YouTube 相关整理备忘</title>
    <link href="https://github.com/smilingmiao/2022/08/21/YouTube-and-Related/"/>
    <id>https://github.com/smilingmiao/2022/08/21/YouTube-and-Related/</id>
    <published>2022-08-21T04:37:25.000Z</published>
    <updated>2022-08-21T05:18:52.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载音视频（及字幕）"><a href="#下载音视频（及字幕）" class="headerlink" title="下载音视频（及字幕）"></a>下载音视频（及字幕）</h2><h3 id="下载最优视频"><a href="#下载最优视频" class="headerlink" title="下载最优视频"></a>下载最优视频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl video_URL</span><br></pre></td></tr></table></figure><h3 id="查看可选的视、音频格式"><a href="#查看可选的视、音频格式" class="headerlink" title="查看可选的视、音频格式"></a>查看可选的视、音频格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -F video_URL</span><br></pre></td></tr></table></figure><p>各选项第一列代表方案 ID</p><h4 id="组合方案进行下载"><a href="#组合方案进行下载" class="headerlink" title="组合方案进行下载"></a>组合方案进行下载</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 单独</span><br><span class="line">youtube-dl -f 100 video_URL</span><br><span class="line"></span><br><span class="line"># 组合</span><br><span class="line">youtube-dl -f 100+200 video_URL</span><br><span class="line"></span><br><span class="line"># 字幕</span><br><span class="line">`—write-sub`：写入字幕，即把字幕下载。  </span><br><span class="line">`--sub-format`：指定字幕格式，按顺序选，不存在则选下一个。  </span><br><span class="line">`--convert-subs`： 转换字幕，格式有限制，通用为 srt ；若不转，某些字幕可能是 .vtt 的；如果有 ass 字幕可下载，则无须加此项。</span><br><span class="line"></span><br><span class="line">youtube-dl --write-sub --sub-format &quot;ass/srt/best&quot; --convert-subs &quot;srt&quot; &quot;video_url&quot;</span><br></pre></td></tr></table></figure><h4 id="Download-only-audio-with-youtube-dl"><a href="#Download-only-audio-with-youtube-dl" class="headerlink" title="Download only audio with youtube-dl"></a>Download only audio with youtube-dl</h4><blockquote><p>If you only want to download audio from a YouTube video, you can use the -x option with youtube-dl. This extract-audio option converts the video files to audio-only files.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -x video_URL</span><br></pre></td></tr></table></figure><p>Example 👇🏻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -x https://www.youtube.com/watch?v=m_PmLG7HqbQ</span><br><span class="line">[youtube] m_PmLG7HqbQ: Downloading webpage</span><br><span class="line">[download] Destination: Zorin OS 16 Review - It&#x27;s a Visual Masterpiece-m_PmLG7HqbQ.m4a</span><br><span class="line">[download] 100% of 4.26MiB in 00:03</span><br><span class="line">[ffmpeg] Correcting container in &quot;Zorin OS 16 Review - It&#x27;s a Visual Masterpiece-m_PmLG7HqbQ.m4a&quot;</span><br><span class="line">[ffmpeg] Post-process file Zorin OS 16 Review - It&#x27;s a Visual Masterpiece-m_PmLG7HqbQ.m4a exists, skipping</span><br></pre></td></tr></table></figure><p>Did you notice the audio format? It is in .m4a format. You may specify the audio format to something of your choice.</p><p>Say you want to extract the audio in MP3 format. You can use it like this: 👇🏻</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl -x --audio-format mp3 video_URL</span><br></pre></td></tr></table></figure><h4 id="Download-entire-YouTube-playlist-in-MP3-format"><a href="#Download-entire-YouTube-playlist-in-MP3-format" class="headerlink" title="Download entire YouTube playlist in MP3 format"></a>Download entire YouTube playlist in MP3 format</h4><p>Yes, you can totally do that. The main thing is to get the URL of the playlist here. It is typically in the following format:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.youtube.com/playlist?list=XXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><p>Now that you have the playlist URL, you can use it to download the audio files in MP3 format in the following fashion:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl --extract-audio --audio-format mp3 -o &quot;%(title)s.%(ext)s&quot; playlist_URL</span><br></pre></td></tr></table></figure><p>That scary looking -o “%(title)s.%(ext)s” specifies the output file (with option -o) and instructs it to use the title of the video and the extension (mp3 in this case) for naming the audio files.</p><h2 id="下载字幕"><a href="#下载字幕" class="headerlink" title="下载字幕"></a>下载字幕</h2><p>通过网站 <a href="https://downsub.com/">下载</a></p><h1 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h1><p><a href="https://ylface.com/course/744.html">youtube-dl安装及简单使用教程</a><br><a href="https://itsfoss.com/youtube-dl-audio-only/">How to Download Audio Only Using youtube-dl</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;下载音视频（及字幕）&quot;&gt;&lt;a href=&quot;#下载音视频（及字幕）&quot; class=&quot;headerlink&quot; title=&quot;下载音视频（及字幕）&quot;&gt;&lt;/a&gt;下载音视频（及字幕）&lt;/h2&gt;&lt;h3 id=&quot;下载最优视频&quot;&gt;&lt;a href=&quot;#下载最优视频&quot; class=&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://github.com/smilingmiao/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://github.com/smilingmiao/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>图形学数学基础知识</title>
    <link href="https://github.com/smilingmiao/2020/06/28/graphic-math-basics/"/>
    <id>https://github.com/smilingmiao/2020/06/28/graphic-math-basics/</id>
    <published>2020-06-27T16:57:27.000Z</published>
    <updated>2020-07-08T23:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="从正余弦三角函数开始"><a href="#从正余弦三角函数开始" class="headerlink" title="从正余弦三角函数开始"></a>从正余弦三角函数开始</h5><p><del>辛辛苦苦写了两小时公式，typora 上是支持的啊，怎么网页不支持。</del></p><p>几个三角函数公式</p><img src="/2020/06/28/graphic-math-basics/1.png" class=""><p>here we go!</p><img src="/2020/06/28/graphic-math-basics/coordinate.png" class=""><p>如图所示，可得</p><img src="/2020/06/28/graphic-math-basics/2.png" class=""><p>结合上面的三角函数公式求解得出：</p><img src="/2020/06/28/graphic-math-basics/3.png" class=""><p>由此可得矩阵</p><img src="/2020/06/28/graphic-math-basics/4.png" class=""><p>凑为齐次坐标</p><img src="/2020/06/28/graphic-math-basics/5.png" class=""><p>类比到三维下，上面的矩阵稍加修改即可代表 XOY 组成的平面绕 <strong>Z</strong> 轴进行旋转的情况，由于绕 <strong>Z</strong> 轴旋转，因此 Z’ &#x3D; Z，可得：</p><img src="/2020/06/28/graphic-math-basics/6.png" class=""><p>可得齐次坐标下的矩阵</p><img src="/2020/06/28/graphic-math-basics/7.png" class=""><blockquote><p>可见，在三维空间中，绕 Z 轴旋转的决定因子在位置【0】【1】【4】【5】（行为主，并且以 0 为起始位置）</p></blockquote><p>我们发现，上面的矩阵稍加变型即可表示 YOZ 平面绕 <strong>X</strong> 轴进行的旋转，可得：</p><img src="/2020/06/28/graphic-math-basics/8.png" class=""><p>可得齐次坐标下的矩阵</p><img src="/2020/06/28/graphic-math-basics/9.png" class=""><blockquote><p>可见，在三维空间中，绕 Z 轴旋转的决定因子在位置【5】【6】【9】【10】（行为主，并且以 0 为起始位置）</p></blockquote><p>根据法向量遵循的右手定则，结合 XOY 平面、YOZ 平面都旋转完了，现在就剩 ZOX 平面了。ZOX 绕 <strong>Y</strong> 轴旋转，那么类比 YOZ 平面旋转的情况，在 ZOX 中，1）Z 相当于 YOZ 中的 Y；2）X 相当于 YOZ 中的 Z；</p><img src="/2020/06/28/graphic-math-basics/10.png" class=""><p>可得齐次坐标下的矩阵</p><img src="/2020/06/28/graphic-math-basics/11.png" class=""><blockquote><p>可见，在三维空间中，绕 Z 轴旋转的决定因子在位置【0】【2】【8】【10】（行为主，并且以 0 为起始位置）</p></blockquote><p>根据上面的结果，绕 X、Y、Z 分别旋转的矩阵如下：</p><img src="/2020/06/28/graphic-math-basics/12.png" class=""><p>由于矩阵乘法不满足交换律，如果要用 R 表示将矩阵按顺序分别绕 X、Y、Z 进行一定的旋转的话，由于计算机是从右往左计算的，所以</p><img src="/2020/06/28/graphic-math-basics/13.png" class=""><p>计算结果：</p><img src="/2020/06/28/graphic-math-basics/14.png" class=""><p>更新：2020-07-09</p><p>补充：在已知轴和旋转角的情况下，表示旋转后的 <strong><a href="https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle">轴和角的旋转矩阵</a></strong></p><p>矩阵公式如下：</p><img src="/2020/06/28/graphic-math-basics/axis_and_angle.png" class=""><p>图来自 <a href="https://wikimedia.org/api/rest_v1/media/math/render/svg/f259f80a746ee20d481f9b7f600031084358a27c">维基百科</a></p><h5 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h5><p><a href="https://math.stackexchange.com/questions/2992347/rotation-matrix-if-x-y-z-the-angles-through-which-x-y-and-z-axis-have-been-rota">https://math.stackexchange.com/questions/2992347/rotation-matrix-if-x-y-z-the-angles-through-which-x-y-and-z-axis-have-been-rota</a></p><p><a href="https://blog.csdn.net/csxiaoshui/article/details/65446125">https://blog.csdn.net/csxiaoshui/article/details/65446125</a></p><p><a href="https://en.wikipedia.org/wiki/Rotation_matrix">https://en.wikipedia.org/wiki/Rotation_matrix</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;从正余弦三角函数开始&quot;&gt;&lt;a href=&quot;#从正余弦三角函数开始&quot; class=&quot;headerlink&quot; title=&quot;从正余弦三角函数开始&quot;&gt;&lt;/a&gt;从正余弦三角函数开始&lt;/h5&gt;&lt;p&gt;&lt;del&gt;辛辛苦苦写了两小时公式，typora 上是支持的啊，怎么网页不支持</summary>
      
    
    
    
    <category term="图形学" scheme="https://github.com/smilingmiao/categories/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
    
    <category term="图形学" scheme="https://github.com/smilingmiao/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用 Automator 解决问题</title>
    <link href="https://github.com/smilingmiao/2020/05/31/use-automator-solve-problems/"/>
    <id>https://github.com/smilingmiao/2020/05/31/use-automator-solve-problems/</id>
    <published>2020-05-30T16:00:00.000Z</published>
    <updated>2020-05-31T15:25:27.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="要解决的问题："><a href="#要解决的问题：" class="headerlink" title="要解决的问题："></a>要解决的问题：</h4><p>平时用 <strong>Markdown</strong> 写字需要给一些字加<font size=3 color=#CF443A>颜色</font>，或者**<font size=3 color=#CF443A>既加粗又加颜色</font>**。</p><h4 id="分析问题"><a href="#分析问题" class="headerlink" title="分析问题"></a>分析问题</h4><p>要把「文字」变成「<font size=3 color=#CF443A>文字</font>」，只要把「文字」变成 <code>&lt;font size=3 color=#CF443A&gt;</code> <code>文字</code> <code>&lt;/font&gt;</code> 三部分组合起来就行。</p><span id="more"></span><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>使用 <strong><font size=3 color=#CF443A>Automator</font></strong> 将选中的文本替换为加 HTML 标签格式的文本返回。</p><p><strong>第一步</strong>：打开 Automator 并选取「快速操作」</p><ul><li><input checked="" disabled="" type="checkbox"> 「工作流程收到当前」选取「文本」</li><li><input checked="" disabled="" type="checkbox"> 「位于」选择「访达.app」</li><li><input checked="" disabled="" type="checkbox"> 勾选「用输出内容替换所选文本」</li></ul><p><strong>第二步</strong>：在左侧菜单栏顶部搜索框里输入「apple script」，将搜索结果「运行 Apple Script」拖入右侧需要的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">on run &#123;input&#125;</span><br><span class="line"></span><br><span class="line">tell application &quot;System Events&quot;</span><br><span class="line">try</span><br><span class="line">set the clipboard to &quot;&quot; -- 清空剪贴板</span><br><span class="line">on error err_message</span><br><span class="line">display dialog err_message</span><br><span class="line">end try</span><br><span class="line">end tell</span><br><span class="line"></span><br><span class="line">set output to &quot;&lt;font size=3 color=#CF443A&gt;&quot; &amp; input &amp; &quot;&lt;/font&gt;&quot; -- 给输入的文字前后加标签</span><br><span class="line"></span><br><span class="line">return output -- 返回输出结果</span><br><span class="line"></span><br><span class="line">end run</span><br></pre></td></tr></table></figure><blockquote><p>其实能做的事情远远不止这些，而且上面不止能使用 Apple Script，还能使用 Shell、JavaScript 等。</p></blockquote><p>第三步：保存。比如保存成名为 <code>color-to-red</code>。</p><p>第四步：在任意编辑器中，选中一些文字，右键 - 服务 - <code>color-to-red</code>。此时文字应该已经变成想要的颜色了。</p><p><strong>改进一下</strong>：其实上面第四步这样挺麻烦的，操作一下要点三次鼠标，如果换成快捷键就好了。</p><blockquote><p>打开设置 - 键盘 - 快捷键 - 服务，找到 <code>color-to-red</code> ，然后录入对应的快捷键。这样在编辑器里选中文字，按快捷键就搞定了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;要解决的问题：&quot;&gt;&lt;a href=&quot;#要解决的问题：&quot; class=&quot;headerlink&quot; title=&quot;要解决的问题：&quot;&gt;&lt;/a&gt;要解决的问题：&lt;/h4&gt;&lt;p&gt;平时用 &lt;strong&gt;Markdown&lt;/strong&gt; 写字需要给一些字加&lt;font size=3 color=#CF443A&gt;颜色&lt;/font&gt;，或者**&lt;font size=3 color=#CF443A&gt;既加粗又加颜色&lt;/font&gt;**。&lt;/p&gt;
&lt;h4 id=&quot;分析问题&quot;&gt;&lt;a href=&quot;#分析问题&quot; class=&quot;headerlink&quot; title=&quot;分析问题&quot;&gt;&lt;/a&gt;分析问题&lt;/h4&gt;&lt;p&gt;要把「文字」变成「&lt;font size=3 color=#CF443A&gt;文字&lt;/font&gt;」，只要把「文字」变成 &lt;code&gt;&amp;lt;font size=3 color=#CF443A&amp;gt;&lt;/code&gt; &lt;code&gt;文字&lt;/code&gt; &lt;code&gt;&amp;lt;/font&amp;gt;&lt;/code&gt; 三部分组合起来就行。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一些基础大杂汇</title>
    <link href="https://github.com/smilingmiao/2020/04/04/mess-basics/"/>
    <id>https://github.com/smilingmiao/2020/04/04/mess-basics/</id>
    <published>2020-04-04T12:42:19.000Z</published>
    <updated>2020-06-27T17:27:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>作为一名程序员，总是绕不开设置环境变量，今天稍微总结一点。</p><p>从 &#x2F;etc 说起，这里的 etc 不是缩写，是abbr. 等等，及其他 (et cetera) 的意思。</p><p>执行 <code>cat /etc/paths</code> 命令可以看到各种命令的脚本存放文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ cat /etc/paths</span><br><span class="line">/usr/local/bin</span><br><span class="line">/usr/bin</span><br><span class="line">/bin</span><br><span class="line">/usr/sbin</span><br><span class="line">/sbin</span><br></pre></td></tr></table></figure><blockquote><p>usr 是 Unix System Resource 的缩写</p></blockquote><span id="more"></span><p>例如，执行一下 <code>ls /bin/</code>，可以看到，我们常用的很多命令都里面。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ls /bin</span><br><span class="line">[         csh       echo      ksh       mkdir     rm        sync      zsh</span><br><span class="line">bash      dash      ed        launchctl mv        rmdir     tcsh</span><br><span class="line">cat       date      expr      link      pax       sh        test</span><br><span class="line">chmod     dd        hostname  ln        ps        sleep     unlink</span><br><span class="line">cp        df        kill      ls        pwd       stty      wait4path</span><br></pre></td></tr></table></figure><p>可以依次执行 <code>ls /sbin</code>，<code>ls /usr/bin</code>，<code>ls /usr/sbin</code> 以及 <code>ls /usr/local/bin</code> 查看各个路径下的命令脚本文件，不再赘述。</p><p><strong>PATH</strong> 属于系统环境变量，很多时候一些应用程序依赖它。</p><p>执行 <code>echo $PATH</code> 后可以看到 <strong>PATH</strong> 中的以冒号<code>:</code>分割的所有命令路径。最后一个冒号<code>:</code>后面跟的是 <code>flutter</code> 命令路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ echo $PATH</span><br><span class="line">/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Library/Apple/usr/bin:/Users/smilingmiao/development/flutter/bin</span><br></pre></td></tr></table></figure><h4 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h4><p>通常我们直接在终端里面执行 export 和 source 命令后，仅在本机本次登录有效。想永远有效就直接在 <code>.zshrc</code> 文件里添加变量。</p><ul><li>比如为添加 flutter 的 <a href="https://flutter.dev/community/china">国内镜像</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure><p>再执行一下 <code>source ~/.zshrc</code></p><ul><li>添加 flutter sdk 命令到系统环境变量 <strong>PATH</strong> 中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$PATH:$HOME/development/flutter/bin&quot;</span><br></pre></td></tr></table></figure><p>这里的 <code>PATH=&quot;$PATH:$HOME/development/flutter/bin&quot;</code> 表示在保留原来的 PATH 环境情况下，再追加路径 $HOME&#x2F;development&#x2F;flutter&#x2F;bin 作为新的 <strong>PATH</strong> 环境变量。</p><blockquote><p>其中，<code>=</code> 代表设置，<code>:</code> 代表<strong>追加</strong></p></blockquote><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p><code>souce</code> 使得被执行文件的变量及函数加载进当前终端环境。</p><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><p>执行自己的 shell 文件，假定存放在用户根目录下的 shell 文件名为 <code>.test.sh</code>，内容为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">foo() &#123;</span><br><span class="line">echo &quot;hello&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先执行 <code>source ~./.test</code>，再执行 <code>foo</code> 就可以打印出 ”hello“.</p><h4 id="xcrun"><a href="#xcrun" class="headerlink" title="xcrun"></a>xcrun</h4><p>先说 <code>xcrun simctl</code>，一看就知道是控制模拟器的，直接在终端执行 <code>xcrun simctl</code> 就可以看到可以使用的所有<code>子命令</code>了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ xcrun simctl</span><br><span class="line">usage: simctl [--set &lt;path&gt;] [--profiles &lt;path&gt;] &lt;subcommand&gt; ...</span><br><span class="line">       simctl help [subcommand]</span><br><span class="line">Command line utility to control the Simulator</span><br><span class="line"></span><br><span class="line">For subcommands that require a &lt;device&gt; argument, you may specify a device UDID</span><br><span class="line">or the special &quot;booted&quot; string which will cause simctl to pick a booted device.</span><br><span class="line">If multiple devices are booted when the &quot;booted&quot; device is selected, simctl</span><br><span class="line">will choose one of them.</span><br><span class="line"></span><br><span class="line">Subcommands:</span><br><span class="line">create              Create a new device.</span><br><span class="line">clone               Clone an existing device.</span><br><span class="line">upgrade             Upgrade a device to a newer runtime.</span><br><span class="line">delete              Delete spcified devices, unavailable devices, or all devices.</span><br><span class="line">pair                Create a new watch and phone pair.</span><br><span class="line">unpair              Unpair a watch and phone pair.</span><br><span class="line">pair_activate       Set a given pair as active.</span><br><span class="line">erase               Erase a device&#x27;s contents and settings.</span><br><span class="line">boot                Boot a device.</span><br><span class="line">shutdown            Shutdown a device.</span><br><span class="line">rename              Rename a device.</span><br><span class="line">getenv              Print an environment variable from a running device.</span><br><span class="line">openurl             Open a URL in a device.</span><br><span class="line">addmedia            Add photos, live photos, videos, or contacts to the library of a device.</span><br><span class="line">install             Install an app on a device.</span><br><span class="line">uninstall           Uninstall an app from a device.</span><br><span class="line">get_app_container   Print the path of the installed app&#x27;s container</span><br><span class="line">launch              Launch an application by identifier on a device.</span><br><span class="line">terminate           Terminate an application by identifier on a device.</span><br><span class="line">spawn               Spawn a process by executing a given executable on a device.</span><br><span class="line">list                List available devices, device types, runtimes, or device pairs.</span><br><span class="line">icloud_sync         Trigger iCloud sync on a device.</span><br><span class="line">pbsync              Sync the pasteboard content from one pasteboard to another.</span><br><span class="line">pbcopy              Copy standard input onto the device pasteboard.</span><br><span class="line">pbpaste             Print the contents of the device&#x27;s pasteboard to standard output.</span><br><span class="line">help                Prints the usage for a given subcommand.</span><br><span class="line">io                  Set up a device IO operation.</span><br><span class="line">diagnose            Collect diagnostic information and logs.</span><br><span class="line">logverbose          enable or disable verbose logging for a device</span><br><span class="line">status_bar          Set or clear status bar overrides</span><br><span class="line">ui                  Get or Set UI options</span><br><span class="line">push                Send a simulated push notification</span><br><span class="line">privacy             Grant, revoke, or reset privacy and permissions</span><br><span class="line">keychain            Manipulate a device&#x27;s keychain</span><br></pre></td></tr></table></figure><p>执行 <code>xcrun simctl list devices iOS</code> 可以看到目前电脑上的所有模拟器，以及运行状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~ xcrun simctl list devices iOS</span><br><span class="line">== Devices ==</span><br><span class="line">-- iOS 13.4 --</span><br><span class="line">    iPhone 8 (B3738A6E-2CA5-43BE-88A9-939339231389) (Shutdown)</span><br><span class="line">    iPhone 8 Plus (6358977D-7D38-479B-B58C-0F1FFE597838) (Shutdown)</span><br><span class="line">    iPhone 11 (8E8490BE-B6FC-40EB-BB4B-15D182E21233) (Shutdown)</span><br><span class="line">    iPhone 11 Pro (964DFF45-2DDB-4C70-AA94-0AC1A08084CB) (Shutdown)</span><br><span class="line">    iPhone 11 Pro Max (24E7078C-4656-4C95-8848-522B286AF7B5) (Shutdown)</span><br><span class="line">    iPad Pro (9.7-inch) (B1217AAB-2B7A-42D0-9DD0-C10A70FA34BC) (Shutdown)</span><br><span class="line">    iPad (7th generation) (A0121545-6727-44C9-93DA-97C1BD8C4CB2) (Shutdown)</span><br><span class="line">    iPad Pro (11-inch) (2nd generation) (A905D7F2-F028-4642-81A9-448AF9C2DC1B) (Shutdown)</span><br><span class="line">    iPad Pro (12.9-inch) (4th generation) (959CE868-E85B-4C64-87BE-E0E04A34EFC2) (Shutdown)</span><br><span class="line">    iPad Air (3rd generation) (ED6079DD-2949-42A7-884A-F981F377CF9C) (Shutdown)</span><br></pre></td></tr></table></figure><p>上面的命令后面加个 <code>-j</code> 打印出 JSON 格式的数据，并可以看到更多的属性信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ xcrun simctl list devices iOS -j</span><br><span class="line">&#123;</span><br><span class="line">  &quot;devices&quot; : &#123;</span><br><span class="line">    &quot;com.apple.CoreSimulator.SimRuntime.tvOS-13-4&quot; : [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    &quot;com.apple.CoreSimulator.SimRuntime.watchOS-6-2&quot; : [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">    &quot;com.apple.CoreSimulator.SimRuntime.iOS-13-4&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;dataPath&quot; : &quot;\/Users\/smilingmiao\/Library\/Developer\/CoreSimulator\/Devices\/B3738A6E-2CA5-43BE-88A9-939339231389\/data&quot;,</span><br><span class="line">        &quot;logPath&quot; : &quot;\/Users\/smilingmiao\/Library\/Logs\/CoreSimulator\/B3738A6E-2CA5-43BE-88A9-939339231389&quot;,</span><br><span class="line">        &quot;udid&quot; : &quot;B3738A6E-2CA5-43BE-88A9-939339231389&quot;,</span><br><span class="line">        &quot;isAvailable&quot; : true,</span><br><span class="line">        &quot;deviceTypeIdentifier&quot; : &quot;com.apple.CoreSimulator.SimDeviceType.iPhone-8&quot;,</span><br><span class="line">        &quot;state&quot; : &quot;Shutdown&quot;,</span><br><span class="line">        &quot;name&quot; : &quot;iPhone 8&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="启动-x2F-关闭一个模拟器"><a href="#启动-x2F-关闭一个模拟器" class="headerlink" title="启动&#x2F;关闭一个模拟器"></a>启动&#x2F;关闭一个模拟器</h5><p>先找到具体型号模拟器的 uuid，然后执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 启动 iPhone 8 模拟器</span><br><span class="line">xcrun simctl boot &quot;B3738A6E-2CA5-43BE-88A9-939339231389&quot;</span><br><span class="line">// 关闭 iPhone 8 模拟器</span><br><span class="line">xcrun simctl shutdown &quot;B3738A6E-2CA5-43BE-88A9-939339231389</span><br></pre></td></tr></table></figure><h5 id="启动一个应用"><a href="#启动一个应用" class="headerlink" title="启动一个应用"></a>启动一个应用</h5><p><code>xcrun simctl launch &quot;B3738A6E-2CA5-43BE-88A9-939339231389&quot; com.apple.shortcuts</code></p><h5 id="关闭一个应用"><a href="#关闭一个应用" class="headerlink" title="关闭一个应用"></a>关闭一个应用</h5><p><code>xcrun simctl terminate &quot;B3738A6E-2CA5-43BE-88A9-939339231389&quot; com.apple.shortcuts</code></p><h5 id="录制模拟器视频"><a href="#录制模拟器视频" class="headerlink" title="录制模拟器视频"></a>录制模拟器视频</h5><p><code>xcrun simctl io booted recordVideo Desktop/demo_video.mov</code></p><p>按 control + C 结束录制，生成的 demo_video.mov 文件在桌面。</p><p>…</p><p>…</p><h4 id="flutter-pub"><a href="#flutter-pub" class="headerlink" title="flutter pub"></a>flutter pub</h4><p>根据 <a href="https://flutter.dev/community/china">Using Flutter in China</a> 设置好镜像，在 flutter 项目中 pubspec.yaml 文件中添加需要的 package，然后<strong>不要</strong>在 Android Studio 中点 Flutter package get，因为会一直卡住拉取不下来。正确的做法是在终端 cd 到 flutter 项目的根目录，然后执行 <code>flutter pub get</code>，几秒钟就好了。</p><h5 id="flutter-run"><a href="#flutter-run" class="headerlink" title="flutter run"></a>flutter run</h5><p>进入 flutter 项目的根目录，执行 <code>flutter run</code>，按照提示操作，这样就得到一个 URL 可以用来在 Android Studio 中的 Dart DevTools 界面了。</p><h4 id="配置-Android-环境变量"><a href="#配置-Android-环境变量" class="headerlink" title="配置 Android 环境变量"></a>配置 Android 环境变量</h4><p>参考 Android <a href="https://developer.android.google.cn/studio/command-line/variables">官网</a> 的介绍，首先找到 Android sdk 的存放路径。之后在 <code>.zshrc</code> 文件中添加环境变量，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Android Studio sdk</span></span><br><span class="line">export ANDROID_SDK_ROOT=&quot;$HOME/Library/Android/sdk&quot;</span><br><span class="line">export PATH=&quot;$PATH:$ANDROID_SDK_ROOT/emulator&quot;</span><br></pre></td></tr></table></figure><p><code>source .zshrc</code> 一下，这样就把 <code>emulator</code> 命令配置好了。</p><p><font color="red">更新</font></p><p>实际操作过程中，执行 <code>emulator -list-avds</code> 时输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ emulator -list-avds</span><br><span class="line">Nexus_4_API_23</span><br><span class="line">Pixel_3_XL_API_29</span><br><span class="line">Pixel_API_24</span><br></pre></td></tr></table></figure><p>再执行 <code>emulator -avd Nexus_4_API_23</code> 时输出如下错误❌</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ emulator -avd Nexus_4_API_23</span><br><span class="line">[4348067264]:ERROR:android/android-emu/android/qt/qt_setup.cpp:28:Qt library not found at ../emulator/lib64/qt/lib</span><br><span class="line">Could not launch &#x27;/Users/smilingmiao/../emulator/qemu/darwin-x86_64/qemu-system-i386&#x27;: No such file or directory</span><br></pre></td></tr></table></figure><p>经过一番 Google 后，在<a href="https://medium.com/js-features/launch-android-emulator-from-console-failure-eb43a1115cb5">这里</a>找到了答案，实际就是更改个命令所在路径。</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 `export PATH=&quot;$PATH:$ANDROID_SDK_ROOT/emulator&quot;` 改为：</span><br><span class="line">export PATH=&quot;$PATH:$ANDROID_SDK_ROOT/tools/emulator&quot;</span><br></pre></td></tr></table></figure></blockquote><p>这样确实是修好了。</p><p>**<font color="red">不过</font>**，我把之前的 AVD 都删掉了，又创建了新的 AVD，于是又需要再把👆上面变更的改回去。🤦</p><p>否则，<code>command not found: emulator</code>。</p><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p><strong>alias命令</strong>用来设置指令的别名。我们可以使用该命令可以将一些较长的命令进行简化。使用alias时，用户必须使用单引号<code>&#39;&#39;</code>将原来的命令引起来，防止特殊字符导致错误。具体查看👉 <a href="https://man.linuxde.net/alias">这里</a></p><p>emulator 作为命令开头，这个单词实在太长了，用别名把命令精简一下偷懒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias e=&#x27;emulator&#x27;</span><br><span class="line">alias evd=&#x27;emulator -avd&#x27;</span><br><span class="line">alias els=&#x27;emulator -list-avds&#x27;</span><br></pre></td></tr></table></figure><p>于是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ els</span><br><span class="line">Pixel_3a_XL_API_29</span><br><span class="line">Pixel_XL_API_R</span><br></pre></td></tr></table></figure><h4 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h4><p><strong>adb 命令 - Android Deubg Bridge</strong></p><p><strong>查看所有 Android 设备</strong></p><p><code>adb devices</code></p><p><strong>查看 app 入口</strong></p><p><code>adb logcat | grep -i displayed</code></p><blockquote><p>注：-i 是忽略大小写的，只要是 displayed 这个单词都会被匹配到</p></blockquote><p>这一步可以获取到 app 入口的 activity 包名路径。例如打开谷歌地图后终端出现：<code>com.google.android.apps.maps/com.google.android.maps.MapsActivity</code></p><p><strong>查看 app 界面元素</strong></p><p><code>adb shell dumpsys activity top</code></p><p><strong>启动应用</strong></p><p><code>adb shell am start -n com.google.android.apps.maps/com.google.android.maps.MapsActivity -S</code></p><blockquote><p>注：am 是 Activity Manager 的缩写。-S 代表 stop，放在此命令中就是启动前先杀死。</p></blockquote><p><strong>清理特定包缓存数据</strong></p><p><code>adb shell pm clear com.google.android.apps.maps</code></p><p><strong>获取界面的元素</strong></p><p><code>adb shell uiautomator dump</code></p><p>UI hierchary dumped to: &#x2F;sdcard&#x2F;window_dump.xml</p><p>再连接 cat 命令查看 dump 下来的文件内容</p><p><code>adb shell &#39;uiautomator dump &amp;&amp; cat /sdcard/window_dump.xml&#39;</code></p><p>这样就显示了当前界面的所有控件配置信息。</p><p>输入 <code>adb shell</code> 了解更多命令</p><h4 id="命令-tree"><a href="#命令-tree" class="headerlink" title="命令 tree"></a>命令 tree</h4><p>Linux tree 命令用于以树状图列出目录的内容。</p><p>执行 tree 指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p><p>执行 <code>tree --help</code> 会列出所有的 option，不再赘述。</p><p>有时候想找个文件，但是直接执行 <code>tree </code> 的话，结果太多在终端里显示不完，此时可以用 tree 命令将整个文件结构输出到一个文件里，然后再打开文件通过关键字查路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tree -f &gt; ~/Desktop/文件名.扩展名</span><br><span class="line">或</span><br><span class="line">tree -f -o ~/Desktop/文件名.扩展名</span><br></pre></td></tr></table></figure><blockquote><p>-f 代表 full path</p></blockquote><h4 id="杂七杂八的命令"><a href="#杂七杂八的命令" class="headerlink" title="杂七杂八的命令"></a>杂七杂八的命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat a.txt | pbcopy   # 将a.txt文件类容写入剪切板，相当于 cmd + C </span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pbpaste              # 将刚刚存入剪切板的a.txt内容复制到终端，相当于 cmd + v</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command + enter  # 在全屏和退出全屏之间切换</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which + 任意命令开头 + tab # 查看命令的全部或 alias</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r + 任意命令开头 + tab     # 查看命令并选择和执行</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control + command + F# 进入或退出全屏</span><br></pre></td></tr></table></figure><h4 id="ffmpeg-相关命令"><a href="#ffmpeg-相关命令" class="headerlink" title="ffmpeg 相关命令"></a>ffmpeg 相关命令</h4><h5 id="video-转-GIF，详见-这里"><a href="#video-转-GIF，详见-这里" class="headerlink" title="video 转 GIF，详见 这里"></a>video 转 GIF，详见 <a href="https://gist.github.com/SheldonWangRJT/8d3f44a35c8d1386a396b9b49b43c385#explanation">这里</a></h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.mov -pix_fmts rgb8 -r 10 output.gif &amp;&amp; gifsicle -O3 output.gif -o output.gif</span><br></pre></td></tr></table></figure><h6 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h6><ol><li>Convert the file to gif using <code>ffmpeg</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- input path argument `-i`</span><br><span class="line">- pixel format argument `-pix_fmt`</span><br><span class="line">- removing some frames using framerate argument `-r`</span><br><span class="line">- end `ffmpeg` with new path/to/filename</span><br></pre></td></tr></table></figure><ol><li>Optimize the same output file with third option <code>-O3</code> and rewrite the generated gif file from last step</li><li>Notes: using <code>&amp;&amp;</code> to make sure the conversion sucess before optimizing</li></ol><p>更新：</p><p>ffmpeg -i input.mov -pix_fmt rgb8 -r 10 output.gif</p><p>由于转换时，gifsicle 老出问题，所以直接就用上面这条</p><h4 id="Git-相关"><a href="#Git-相关" class="headerlink" title="Git 相关"></a>Git 相关</h4><h5 id="GitLab-服务器主机重装后的问题"><a href="#GitLab-服务器主机重装后的问题" class="headerlink" title="GitLab 服务器主机重装后的问题"></a>GitLab 服务器主机重装后的问题</h5><h5 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br></pre></td></tr></table></figure><p>分析可能就是服务器证书变更了，和本地的指纹不对应了。只有清除当前机器里关于远程服务器的缓存和公钥信息。</p><h5 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -R 192.168.xxx.xxx（自建 GitLab 服务器地址）</span><br></pre></td></tr></table></figure><h4 id="Carthage"><a href="#Carthage" class="headerlink" title="Carthage"></a>Carthage</h4><p>LLDB 出现 “Couldn’t IRGen expression”，解决方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">carthage update --platform macOS --no-use-binaries</span><br></pre></td></tr></table></figure><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><p>最近从不同渠道抓了些数据，渠道字段为 <code>app</code>，抓取时间为 <code>times</code>，所有渠道的数据到写到一张名为 <code>spiderapp_202005</code> 的表里了。现在想统计一下 2020 年 5 月 14 日 各个渠道抓到的数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">COUNT( * ) AS &#x27;总量&#x27;,</span><br><span class="line">SUM( CASE WHEN app = &#x27;渠道1&#x27; THEN 1 ELSE 0 END ) AS &#x27;渠道1&#x27;,</span><br><span class="line">SUM( CASE WHEN app = &#x27;渠道2&#x27; THEN 1 ELSE 0 END ) AS &#x27;渠道2&#x27;,</span><br><span class="line">SUM( CASE WHEN app = &#x27;渠道3&#x27; THEN 1 ELSE 0 END ) AS &#x27;渠道3&#x27;</span><br><span class="line">FROM</span><br><span class="line">`spiderapp_202005` </span><br><span class="line">WHERE</span><br><span class="line">AND times &gt; &#x27;2020-05-14 00:00:00&#x27; </span><br><span class="line">AND times &lt; &#x27;2020-05-15 00:00:00&#x27;</span><br></pre></td></tr></table></figure><p>执行结果为</p><table><thead><tr><th>总量</th><th>渠道1</th><th>渠道2</th><th>渠道3</th></tr></thead><tbody><tr><td>288</td><td>40</td><td>191</td><td>57</td></tr></tbody></table><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/06ee358ad5c0">https://www.jianshu.com/p/06ee358ad5c0</a></p><p><a href="https://blog.csdn.net/ouyang_peng/article/details/81536396">https://blog.csdn.net/ouyang_peng/article/details/81536396</a></p><p><a href="https://developer.android.google.cn/studio/command-line">https://developer.android.google.cn/studio/command-line</a></p><p><a href="https://developer.android.google.cn/studio/command-line/variables">Android 配置环境变量</a></p><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;环境变量&quot;&gt;&lt;a href=&quot;#环境变量&quot; class=&quot;headerlink&quot; title=&quot;环境变量&quot;&gt;&lt;/a&gt;环境变量&lt;/h4&gt;&lt;p&gt;作为一名程序员，总是绕不开设置环境变量，今天稍微总结一点。&lt;/p&gt;
&lt;p&gt;从 &amp;#x2F;etc 说起，这里的 etc 不是缩写，是abbr. 等等，及其他 (et cetera) 的意思。&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;cat /etc/paths&lt;/code&gt; 命令可以看到各种命令的脚本存放文件。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  ~ cat /etc/paths&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/bin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/sbin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;usr 是 Unix System Resource 的缩写&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="开发环境" scheme="https://github.com/smilingmiao/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="命令行集" scheme="https://github.com/smilingmiao/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>使用 AppleScript 检测浏览器中不健康的网站</title>
    <link href="https://github.com/smilingmiao/2020/03/28/find-porn-web-in-browser/"/>
    <id>https://github.com/smilingmiao/2020/03/28/find-porn-web-in-browser/</id>
    <published>2020-03-28T07:19:37.000Z</published>
    <updated>2020-05-17T16:24:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>想达成的目的：通过脚本程序<strong>每分钟</strong>进行检测浏览器中打开的网页<strong>是否包含</strong>黄色网站，如果包含就弹窗提示，通过点击弹窗的按钮关闭该网站。</p><span id="more"></span><h4 id="简单的脚本代码："><a href="#简单的脚本代码：" class="headerlink" title="简单的脚本代码："></a>简单的脚本代码：</h4><figure class="highlight plaintext"><figcaption><span>Script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">-- 查看应用是否在运行中</span><br><span class="line">on app_is_running(app_name)</span><br><span class="line">tell application &quot;System Events&quot;</span><br><span class="line">set safari_is_running to (name of processes) contains app_name</span><br><span class="line">return safari_is_running</span><br><span class="line">end tell</span><br><span class="line">end app_is_running</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 不健康网站域名集合，这里瞎凑数</span><br><span class="line">set porns to &#123;&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;, &quot;ddd&quot;, &quot;fff&quot;, &quot;ggg&quot;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查看 Safari 是否在运行中</span><br><span class="line">if app_is_running(&quot;Safari&quot;) then</span><br><span class="line">tell application &quot;Google Chrome&quot;</span><br><span class="line">set theWindows to windows</span><br><span class="line">repeat with theWindow in theWindows</span><br><span class="line">set theTabs to tab of theWindow</span><br><span class="line">repeat with theTab in theTabs</span><br><span class="line">set tabURL to theTab&#x27;s URL</span><br><span class="line">repeat with pornURL in porns</span><br><span class="line">if tabURL contains pornURL then</span><br><span class="line">display dialog &quot;小逼仔别浏览黄色网站了，注意营养&quot; buttons &#123;&quot;关闭&quot;&#125; default button 1</span><br><span class="line">if the button returned of the result is &quot;关闭&quot; then</span><br><span class="line">close theTab</span><br><span class="line">exit repeat</span><br><span class="line">end if</span><br><span class="line">end if</span><br><span class="line">end repeat</span><br><span class="line">end repeat</span><br><span class="line">end repeat</span><br><span class="line">end tell</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查看 Google Chrome 是否在运行中</span><br><span class="line">if app_is_running(&quot;Google Chrome&quot;) then</span><br><span class="line">tell application &quot;Google Chrome&quot;</span><br><span class="line">set theWindows to windows</span><br><span class="line">repeat with theWindow in theWindows</span><br><span class="line">set theTabs to tab of theWindow</span><br><span class="line">repeat with theTab in theTabs</span><br><span class="line">set tabURL to theTab&#x27;s URL</span><br><span class="line">repeat with pornURL in porns</span><br><span class="line">if tabURL contains pornURL then</span><br><span class="line">display dialog &quot;小逼仔别浏览黄色网站了，注意营养&quot; buttons &#123;&quot;关闭&quot;&#125; default button 1</span><br><span class="line">if the button returned of the result is &quot;关闭&quot; then</span><br><span class="line">close theTab</span><br><span class="line">exit repeat</span><br><span class="line">end if</span><br><span class="line">end if</span><br><span class="line">end repeat</span><br><span class="line">end repeat</span><br><span class="line">end repeat</span><br><span class="line">end tell</span><br><span class="line">end if</span><br></pre></td></tr></table></figure><h4 id="定时执行脚本："><a href="#定时执行脚本：" class="headerlink" title="定时执行脚本："></a>定时执行脚本：</h4><p><strong>方法一</strong></p><ul><li><p>使用 Linux 命令 <code>crontab</code> 和 <code>osascript</code> 配合执行脚本 </p></li><li><p>假设脚本文件是：<code>/Users/smilingmiao/Desktop/apple.scpt</code></p></li><li><p>终端执行 <code>crontab -e</code> 进入交互界面（备注：e 是 edit 的首字母）</p></li><li><p>输入 <code>* * * * * osascript /Users/smilingmiao/Desktop/apple.scpt</code> （其中空格隔开的5个星号是 linux 命令）</p></li></ul><p><strong>方法二</strong></p><p>使用 <code>launchctl</code> 命令配合 plist 文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;?xml</span> <span class="string">version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="attr">&lt;!DOCTYPE</span> <span class="string">plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;plist</span> <span class="string">version=&quot;1.0&quot;&gt;</span></span><br><span class="line"><span class="attr">&lt;dict&gt;</span></span><br><span class="line"><span class="attr">&lt;key&gt;Label&lt;/key&gt;</span></span><br><span class="line"><span class="attr">&lt;string&gt;com.dirty.identify&lt;/string&gt;</span> <span class="string">/// 全局唯一</span></span><br><span class="line"><span class="attr">&lt;key&gt;ProgramArguments&lt;/key&gt;</span></span><br><span class="line"><span class="attr">&lt;array&gt;</span></span><br><span class="line"><span class="attr">&lt;string&gt;osascript&lt;/string&gt;</span> <span class="string">/// 命令</span></span><br><span class="line"><span class="attr">&lt;string&gt;/Users/smilingmiao/Desktop/identify.scpt&lt;/string&gt;</span> <span class="string">/// 参数</span></span><br><span class="line"><span class="attr">&lt;/array&gt;</span></span><br><span class="line"><span class="attr">&lt;key&gt;StartInterval&lt;/key&gt;</span> <span class="string">/// 运行间隔时间</span></span><br><span class="line"><span class="attr">&lt;integer&gt;60&lt;/integer&gt;</span> <span class="string">/// 代表 60 秒</span></span><br><span class="line"><span class="attr">&lt;/dict&gt;</span></span><br><span class="line"><span class="attr">&lt;/plist&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>将此 plist 文件保存成 com.dirty.identify.plist</p></li><li><p>终端执行 <code>cd ~/Library/LaunchAgents</code> 进入 LaunchAgents</p></li><li><p>将 com.dirty.identify.plist 文件放到此处</p></li><li><p>执行 <code>launchctl load -w com.dirty.identify.plist</code> </p></li><li><p>Mac 弹窗询问授权，都选同意</p></li></ul><h5 id="osascript"><a href="#osascript" class="headerlink" title="osascript"></a>osascript</h5><blockquote><p>osascript stands for Open Scripting Architecture Scripting Language. … Executes the given script file, or standard input if none is given. Scripts can be plain text or compiled scripts. osascript was designed for use with AppleScript, but will work with any Open Scripting Architecture (OSA) language.</p></blockquote><p>– EOF –</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://www.cnblogs.com/hanlingzhi/p/6505967.html">https://www.cnblogs.com/hanlingzhi/p/6505967.html</a></p><p><a href="https://www.jianshu.com/p/b65c1d339eec">https://www.jianshu.com/p/b65c1d339eec</a></p><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;想达成的目的：通过脚本程序&lt;strong&gt;每分钟&lt;/strong&gt;进行检测浏览器中打开的网页&lt;strong&gt;是否包含&lt;/strong&gt;黄色网站，如果包含就弹窗提示，通过点击弹窗的按钮关闭该网站。&lt;/p&gt;</summary>
    
    
    
    
    <category term="脚本" scheme="https://github.com/smilingmiao/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>lambda</title>
    <link href="https://github.com/smilingmiao/2019/05/17/lambda/"/>
    <id>https://github.com/smilingmiao/2019/05/17/lambda/</id>
    <published>2019-05-16T16:00:00.000Z</published>
    <updated>2020-05-17T16:23:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>lambda 由 参数 + 箭头 + 表达式 组成。</p><span id="more"></span><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(username: <span class="type">String</span>, password: <span class="type">String</span>, done: (<span class="type">String</span>) -&gt; <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// handle login</span></span><br><span class="line">        ......</span><br><span class="line">        <span class="comment">// a second later, handle done.</span></span><br><span class="line">        <span class="keyword">val</span> str: String = <span class="string">&quot;hello&quot;</span></span><br><span class="line">        <span class="keyword">val</span> res = done(str)</span><br><span class="line">        println(res)        <span class="comment">// `hello world`</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>我们定义了一个登录函数，最后一个参数是一个 <code>lambda</code>，这个 <code>lambda</code> 由 箭头(<code>→</code>) 以及左右两部分组成，左边表示接受一个 (参数)，右边表示表达式并且同时表示需要把表达式的运算结果返回，虽然有时候可能只是一个简单地一个值或对象，但是我们可以在返回时候自己对其别的操作。</p><p>比如调用</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login(username, password, done = &#123; a -&gt; a + <span class="string">&quot; world&quot;</span> &#125;)</span><br></pre></td></tr></table></figure><p>可以看到，在调用的时候，<code>done(str)</code> 将值回传给 a 接收，然后对 a 进行一些操作后又返回到 login 函数里（我们说过，箭头(<code>→</code>) 右边的是运算表达式，当运算完成后就把结果返回的）。</p><h4 id="再来看个稍微复杂点的"><a href="#再来看个稍微复杂点的" class="headerlink" title="再来看个稍微复杂点的"></a>再来看个稍微复杂点的</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(username: <span class="type">String</span>, password: <span class="type">String</span>, done: (<span class="type">String</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">String</span>)</span></span> &#123; </span><br><span class="line">        <span class="comment">// handle login</span></span><br><span class="line">    ......</span><br><span class="line">        <span class="comment">// a second later, handle done.</span></span><br><span class="line">        <span class="keyword">val</span> str: String = <span class="string">&quot;hello&quot;</span></span><br><span class="line">        <span class="keyword">val</span> res = done(str) <span class="comment">// 得到一个子 lambda 表达式</span></span><br><span class="line">        <span class="keyword">val</span> fin = res(<span class="number">1</span>)</span><br><span class="line">        println(fin)            <span class="comment">// `hello no. 1`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="再看调用（kotlin-语法允许将-lambda-表达式写到外面的大括号中）"><a href="#再看调用（kotlin-语法允许将-lambda-表达式写到外面的大括号中）" class="headerlink" title="再看调用（kotlin 语法允许将 lambda 表达式写到外面的大括号中）"></a>再看调用（kotlin 语法允许将 lambda 表达式写到外面的大括号中）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login(username, password) &#123; o -&gt; &#123; i -&gt; o + <span class="string">&quot; no. <span class="variable">$i</span>&quot;</span> &#125; &#125;</span><br></pre></td></tr></table></figure><p>就这样吧 ;-)</p><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;lambda 由 参数 + 箭头 + 表达式 组成。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>让通话界面进入后台</title>
    <link href="https://github.com/smilingmiao/2019/04/27/let-calling-to-background/"/>
    <id>https://github.com/smilingmiao/2019/04/27/let-calling-to-background/</id>
    <published>2019-04-27T12:01:38.000Z</published>
    <updated>2020-04-08T10:51:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>有个需求，希望我们在应用内打出去电话时，让我们的 app 显示在最前面，将打电话界面置于后面。大概这类需求太少，网上并没找到任何资料。本来我是想着在拨出去电话时候先通过方法：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (void)openURL:(NSURL*)url options:(NSDictionary&lt;UIApplicationOpenExternalURLOptionsKey, id&gt; *)options completionHandler:(void (^ __nullable)(BOOL success))completion</span><br></pre></td></tr></table></figure><p>打开 Safari 访问一个地址，然后利用 URL Scheme 并通过 js 回调打开 app 使其在最上层。但想到切来切去用户体验很不好，于是想到可以先用一个图层覆盖到 keyWindow 再调一下自己的 Scheme 来让 app 置于最上层，通过尝试觉得可行。</p><p>下面是一些实现代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">- (void)outgoingCallback &#123;</span><br><span class="line">  </span><br><span class="line">  UIWindow *window = [[UIApplication sharedApplication] keyWindow];</span><br><span class="line">  __block UIView *tempView = [UIView new];</span><br><span class="line">  [window addSubview:tempView];</span><br><span class="line">  </span><br><span class="line">  tempView.translatesAutoresizingMaskIntoConstraints = NO;</span><br><span class="line">  [window addConstraint:[tempView.leadingAnchor constraintEqualToAnchor:window.leadingAnchor]];</span><br><span class="line">  [window addConstraint:[tempView.trailingAnchor constraintEqualToAnchor:window.trailingAnchor]];</span><br><span class="line">  [window addConstraint:[tempView.topAnchor constraintLessThanOrEqualToAnchor:window.topAnchor]];</span><br><span class="line">  [window addConstraint:[tempView.bottomAnchor constraintEqualToAnchor:window.bottomAnchor]];</span><br><span class="line">  </span><br><span class="line">  dispatch_async(dispatch_get_global_queue(QOS_CLASS_USER_INITIATED, 0), ^&#123;</span><br><span class="line">  sleep(1);</span><br><span class="line">  dispatch_async(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">  tempView.hidden = YES;</span><br><span class="line">  &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  NSURL *url = [NSURL URLWithString:@&quot;tinybeeee://&quot;];</span><br><span class="line">  BOOL can = [[UIApplication sharedApplication] canOpenURL:url];</span><br><span class="line">  if (can) &#123;</span><br><span class="line">  [[UIApplication sharedApplication] openURL:url options:@&#123;&#125; completionHandler:^(BOOL success) &#123;</span><br><span class="line">  [tempView removeFromSuperview];</span><br><span class="line">  tempView = nil;</span><br><span class="line">  NSLog(@&quot;====tmp vie ===== %@&quot;, tempView);</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  NSURL *url = [NSURL URLWithString:@&quot;tinybeeee://&quot;];</span><br><span class="line"></span><br><span class="line">  BOOL can = [[UIApplication sharedApplication] canOpenURL:url];</span><br><span class="line">  if (can) &#123;</span><br><span class="line">    [[UIApplication sharedApplication] openURL:url options:@&#123;&#125; completionHandler:^(BOOL success) &#123;</span><br><span class="line">      if (success) &#123;</span><br><span class="line">        NSLog(@&quot;成功。。。。&quot;);</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        NSLog(@&quot;失败。。。。&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    NSLog(@&quot;不能打开。。。&quot;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>URL Types 填自己的 <code>identifier</code> 和 <code>URLSchemes</code>，eg：前者我填 <code>smilingmiao</code>，后者填 <code>laughing</code> 即可。</p><p>在 <code>AppDelegate</code> 中实现下面的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options &#123;</span><br><span class="line">  NSLog(@&quot;url = %@&quot;, url.absoluteString);</span><br><span class="line">  NSLog(@&quot;options = %@&quot;, options);</span><br><span class="line">  return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Safari</code> 地址栏输入 <code>laughing://smilingmiao?a=1&amp;b=2</code> 并回车，控制台打印如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">laughing://smilingmiao?a=1&amp;b=2</span><br><span class="line">&#123;</span><br><span class="line">    UIApplicationOpenURLOptionsOpenInPlaceKey = 0;</span><br><span class="line">    UIApplicationOpenURLOptionsSourceApplicationKey = &quot;com.apple.mobilesafari&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;有个需求，希望我们在应用内打出去电话时，让我们的 app 显示在最前面，将打电话界面置于后面。大概这类需求太少，网上并没找到任何资料。本来我是想着在拨出去电话时候先通过方法：&lt;/p&gt;</summary>
    
    
    
    
    <category term="打电话" scheme="https://github.com/smilingmiao/tags/%E6%89%93%E7%94%B5%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>链接器：动态库加载实践过程</title>
    <link href="https://github.com/smilingmiao/2019/03/23/the-linker-load-process/"/>
    <id>https://github.com/smilingmiao/2019/03/23/the-linker-load-process/</id>
    <published>2019-03-22T16:00:00.000Z</published>
    <updated>2020-05-17T16:22:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h4><p>现有三个文件，代码分别如下：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// Boy.h</span><br><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line">@interface Boy : NSObject</span><br><span class="line">- (void)say;</span><br><span class="line">@end </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Boy.m</span><br><span class="line">#import &quot;Boy.h&quot;</span><br><span class="line">@implementation Boy</span><br><span class="line">- (void)say</span><br><span class="line">&#123;</span><br><span class="line">    NSLog(@&quot;hi there again!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// main.m</span><br><span class="line">#import &quot;Boy.h&quot;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        Boy *boy = [[Boy alloc] init];</span><br><span class="line">        [boy say];</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h4><p>编译 <code>.m</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang -c Boy.m main.m</span><br></pre></td></tr></table></figure><p>产物</p><img src="/2019/03/23/the-linker-load-process/compile-derived.png" class=""><h4 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h4><p>将编译后的 <code>.o</code> 文件链接起来生成 <code>a.out</code> 可执行文件（<code>a.out</code> 是编译器的默认名字）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun clang main.o Boy.o -Wl,`xcrun --show-sdk-path`/System/Library/Frameworks/Foundation.framework/Foundation</span><br></pre></td></tr></table></figure><p>产物</p><img src="/2019/03/23/the-linker-load-process/link-derived.png" class=""><h4 id="step-4"><a href="#step-4" class="headerlink" title="step 4"></a>step 4</h4><p>使用 <code>nm</code> 命令查看符号表规定的符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm main.o</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                 U _OBJC_CLASS_$_Boy</span><br><span class="line">0000000000000000 T _main</span><br><span class="line">                 U _objc_autoreleasePoolPop</span><br><span class="line">                 U _objc_autoreleasePoolPush</span><br><span class="line">                 U _objc_msgSend</span><br></pre></td></tr></table></figure><p>看得人云里雾里，只看到了些符号，似乎缺少一些信息。比如 <code>U</code> 和 <code>T</code> 分别代表什么，再试试别的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun nm -nm main.o</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                 (undefined) external _OBJC_CLASS_$_Boy</span><br><span class="line">                 (undefined) external _objc_autoreleasePoolPop</span><br><span class="line">                 (undefined) external _objc_autoreleasePoolPush</span><br><span class="line">                 (undefined) external _objc_msgSend</span><br><span class="line">0000000000000000 (__TEXT,__text) external _main</span><br></pre></td></tr></table></figure><p>除了把 <code>U</code> 替换成我们能看懂的单词 <code>undefined-未定义</code> 以及 <code>T</code> 变成 <code>TEXT</code> 外，还在原来的信息上又多了 <code>external</code> 代表 “非私有”。<code>external _main</code> 表示 <code>main()</code> 函数处理 0 地址，记录在 <code>TEXT</code> 段 <code>__text</code> 里。</p><p>再看下 <code>Boy.o</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcrun nm -nm Boy.o</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                 (undefined) external _NSLog</span><br><span class="line">                 (undefined) external _OBJC_CLASS_$_NSObject</span><br><span class="line">                 (undefined) external _OBJC_METACLASS_$_NSObject</span><br><span class="line">                 (undefined) external ___CFConstantStringClassReference</span><br><span class="line">                 (undefined) external __objc_empty_cache</span><br><span class="line">0000000000000000 (__TEXT,__text) non-external -[Boy say]</span><br><span class="line">0000000000000060 (__DATA,__objc_const) non-external l_OBJC_METACLASS_RO_$_Boy</span><br><span class="line">00000000000000a8 (__DATA,__objc_const) non-external l_OBJC_$_INSTANCE_METHODS_Boy</span><br><span class="line">00000000000000c8 (__DATA,__objc_const) non-external l_OBJC_CLASS_RO_$_Boy</span><br><span class="line">0000000000000110 (__DATA,__objc_data) external _OBJC_METACLASS_$_Boy</span><br><span class="line">0000000000000138 (__DATA,__objc_data) external _OBJC_CLASS_$_Boy</span><br></pre></td></tr></table></figure><p>上面的 <code>undefined</code> 符号表示该文件类未定义，因此在目标文件和 <code>Foundation framework</code> 动态链接库进行链接时候，链接器会尝试解析所有的 <code>undefined</code> 符号。</p><h4 id="step-5"><a href="#step-5" class="headerlink" title="step 5"></a>step 5</h4><p>使用 <code>nm</code> 命令查看一下 <code>a.out</code> 符号表，对比着 <code>Boy.o</code> 看看连接器解析符号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcrun nm -nm a.out</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">                 (undefined) external _NSLog (from Foundation)</span><br><span class="line">                 (undefined) external _OBJC_CLASS_$_NSObject (from libobjc)</span><br><span class="line">                 (undefined) external _OBJC_METACLASS_$_NSObject (from libobjc)</span><br><span class="line">                 (undefined) external ___CFConstantStringClassReference (from CoreFoundation)</span><br><span class="line">                 (undefined) external __objc_empty_cache (from libobjc)</span><br><span class="line">                 (undefined) external _objc_autoreleasePoolPop (from libobjc)</span><br><span class="line">                 (undefined) external _objc_autoreleasePoolPush (from libobjc)</span><br><span class="line">                 (undefined) external _objc_msgSend (from libobjc)</span><br><span class="line">                 (undefined) external dyld_stub_binder (from libSystem)</span><br><span class="line">0000000100000000 (__TEXT,__text) [referenced dynamically] external __mh_execute_header</span><br><span class="line">0000000100000ea0 (__TEXT,__text) external _main</span><br><span class="line">0000000100000f20 (__TEXT,__text) non-external -[Boy say]</span><br><span class="line">0000000100001130 (__DATA,__objc_data) external _OBJC_METACLASS_$_Boy</span><br><span class="line">0000000100001158 (__DATA,__objc_data) external _OBJC_CLASS_$_Boy</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重点关注 <code>undefined</code> 符号进行对比。再用👇命令看看符号所需的库的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xcrun otool -L a.out</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.out:</span><br><span class="line">/System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1560.12.0)</span><br><span class="line">/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.200.5)</span><br><span class="line">/System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1560.12.0)</span><br><span class="line">/usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从输出结果来看，这些 <code>undefined</code> 符号需要的两个库分别是 <code>libSystem</code> 和 <code>libobjc</code>。</p><h4 id="step-6"><a href="#step-6" class="headerlink" title="step 6"></a>step 6</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(export DYLD_PRINT_LIBRARIES=; ./a.out)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">dyld: loaded: /Users/miaoyongxiang/Desktop/./a.out</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation</span><br><span class="line">dyld: loaded: /usr/lib/libSystem.B.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation</span><br><span class="line">dyld: loaded: /usr/lib/libobjc.A.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libauto.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration</span><br><span class="line">dyld: loaded: /usr/lib/libarchive.2.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libDiagnosticMessagesClient.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libicucore.A.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libxml2.2.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libz.1.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices</span><br><span class="line">dyld: loaded: /usr/lib/liblangid.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit</span><br><span class="line">dyld: loaded: /usr/lib/libCRFSuite.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libc++.1.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libc++abi.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libcache.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libcommonCrypto.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libcompiler_rt.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libcopyfile.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libcorecrypto.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libdispatch.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libdyld.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libkeymgr.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/liblaunch.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libmacho.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libquarantine.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libremovefile.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_asl.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_blocks.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_c.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_configuration.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_coreservices.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_darwin.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_dnssd.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_info.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_m.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_malloc.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_networkextension.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_notify.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_sandbox.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_secinit.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_kernel.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_platform.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_pthread.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_symptoms.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libsystem_trace.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libunwind.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libxpc.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Security.framework/Versions/A/Security</span><br><span class="line">dyld: loaded: /usr/lib/libenergytrace.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libbsm.0.dylib</span><br><span class="line">dyld: loaded: /usr/lib/system/libkxld.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression</span><br><span class="line">dyld: loaded: /usr/lib/libOpenScriptingUtil.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libcoretls.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libcoretls_cfhelpers.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libpam.2.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libsqlite3.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libxar.1.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libbz2.1.0.dylib</span><br><span class="line">dyld: loaded: /usr/lib/liblzma.5.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libnetwork.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libapple_nghttp2.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libpcap.A.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/CoreNLP.framework/Versions/A/CoreNLP</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/MetadataUtilities.framework/Versions/A/MetadataUtilities</span><br><span class="line">dyld: loaded: /usr/lib/libmecabra.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ColorSync.framework/Versions/A/ColorSync</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSyncLegacy.framework/Versions/A/ColorSyncLegacy</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/SkyLight.framework/Versions/A/SkyLight</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate</span><br><span class="line">dyld: loaded: /usr/lib/libcompression.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreDisplay.framework/Versions/A/CoreDisplay</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Metal.framework/Versions/A/Metal</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Versions/A/MetalPerformanceShaders</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libQuadrature.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBNNS.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparse.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/GPUWrangler.framework/Versions/A/GPUWrangler</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/IOAccelerator.framework/Versions/A/IOAccelerator</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/IOPresentment.framework/Versions/A/IOPresentment</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/DSExternalDisplay.framework/Versions/A/DSExternalDisplay</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreFSCache.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework/Versions/A/MPSCore</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework/Versions/A/MPSImage</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework/Versions/A/MPSNeuralNetwork</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework/Versions/A/MPSMatrix</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Versions/A/MPSRayIntersector</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/MetalTools.framework/Versions/A/MetalTools</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/AggregateDictionary.framework/Versions/A/AggregateDictionary</span><br><span class="line">dyld: loaded: /usr/lib/libMobileGestalt.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreImage.framework/Versions/A/CoreImage</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/GraphVisualizer.framework/Versions/A/GraphVisualizer</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL</span><br><span class="line">dyld: loaded: /usr/lib/libFosl_dynamic.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libcups.2.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/GSS.framework/Versions/A/GSS</span><br><span class="line">dyld: loaded: /usr/lib/libresolv.9.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libiconv.2.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal</span><br><span class="line">dyld: loaded: /usr/lib/libheimdal-asn1.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/APFS.framework/Versions/A/APFS</span><br><span class="line">dyld: loaded: /usr/lib/libutil.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libcharset.1.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/AppleSauce.framework/Versions/A/AppleSauce</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/BaseBoard.framework/Versions/A/BaseBoard</span><br><span class="line">dyld: loaded: /usr/lib/libmecab.1.0.0.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libgermantok.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libThaiTokenizer.dylib</span><br><span class="line">dyld: loaded: /usr/lib/libChineseTokenizer.dylib</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/LanguageModeling.framework/Versions/A/LanguageModeling</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/CoreEmoji.framework/Versions/A/CoreEmoji</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/Lexicon.framework/Versions/A/Lexicon</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/LinguisticData.framework/Versions/A/LinguisticData</span><br><span class="line">dyld: loaded: /usr/lib/libcmph.dylib</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData</span><br><span class="line">dyld: loaded: /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement</span><br><span class="line">dyld: loaded: /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement</span><br><span class="line">dyld: loaded: /usr/lib/libxslt.1.dylib</span><br><span class="line">dyld: loaded: /System/Library/CoreServices/Encodings/libSimplifiedChineseConverter.dylib</span><br><span class="line">2019-03-22 13:59:21.000 a.out[2048:178438] hi there again!</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可见，加载的库非常多，并且 <code>.dylib</code> 类动态链接的库也占很大一部分。</p><p>– EOF –</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p><a href="https://objccn.io/issue-6-3/">https://objccn.io/issue-6-3/</a></p><p><a href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/intro.3.html">https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/intro.3.html</a></p><p><a href="https://opensource.apple.com/tarballs/">https://opensource.apple.com/tarballs/</a></p><p><a href="https://blog.cnbluebox.com/blog/2017/06/20/dyldyu-objc/">https://blog.cnbluebox.com/blog/2017/06/20/dyldyu-objc/</a></p><p><a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html">https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html</a></p><p><a href="http://blog.cnbang.net/tech/3219/">http://blog.cnbang.net/tech/3219/</a></p><p><a href="https://stackoverflow.com/questions/7221141/any-difference-between-wl-option-and-xlinker-option-syntax-for-gcc">https://stackoverflow.com/questions/7221141/any-difference-between-wl-option-and-xlinker-option-syntax-for-gcc</a></p><p><a href="https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Link-Options.html#Link-Options">https://gcc.gnu.org/onlinedocs/gcc-7.3.0/gcc/Link-Options.html#Link-Options</a></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;step-1&quot;&gt;&lt;a href=&quot;#step-1&quot; class=&quot;headerlink&quot; title=&quot;step 1&quot;&gt;&lt;/a&gt;step 1&lt;/h4&gt;&lt;p&gt;现有三个文件，代码分别如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>UITableViewCell 自适应高度</title>
    <link href="https://github.com/smilingmiao/2019/03/20/Self-adaptive-UITableViewCell-Height/"/>
    <id>https://github.com/smilingmiao/2019/03/20/Self-adaptive-UITableViewCell-Height/</id>
    <published>2019-03-19T16:00:00.000Z</published>
    <updated>2020-05-17T16:22:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h3><p>在戴铭老师的专栏第三篇<a href="https://time.geekbang.org/column/article/85332">文章</a>，评论中有人提到使用 AutoLayout 布局来实现 UITableViewCell 高度自适应的问题。在评论中，戴铭老师给出了解决<a href="https://github.com/ming1016/study/wiki/Masonry">方案</a>。我经过自己写 demo 实践了一下的确是可以的，当然直接使用 Xib 布局好加载到 UITableView 中也行。在读 <a href="https://github.com/SnapKit/Masonry">Masonry</a> 源码过程中，我惊叹于作者使用 block 的巧妙思路，简直可以叫 Blocksonry 了。通过 chainable syntax 点语法返回对象或 block，这样就点点点就完成了一系列函数调用，实在巧妙。下面是个例子。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[subview mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.top.equalTo(superview.mas_top).offset(10);</span><br><span class="line">    make.leading.equalTo(superview.mas_leading).offset(10);</span><br><span class="line">    make.trailing.equalTo(superview.mas_trailing).offset(-10);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p><code>Masonry</code> 通过分类 <code>View+MASAdditions</code> 作为调用入口，这样 UIView 类簇的所有类都可以直接调用。<code>MASConstraintMaker</code> 是一个布局对象，<code>subview</code> 调用方法 <code>mas_makeConstraints:^(...)</code> 后，<code>MASConstraintMaker</code> 实例会被创建并且以 <code>weak</code> 和 <code>readonly</code> 方式持有 <code>subview</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MASConstraintMaker *constraintMaker = [[MASConstraintMaker alloc] initWithView:self];</span><br></pre></td></tr></table></figure><p>紧接着，<code>MASConstraintMaker</code> 实例 <code>make</code> 被 block 回调以参数的方式传递到我们编写的代码在中，这时我们就可以通过这个 <code>make</code> 设置所有需要的布局操作了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">block(constraintMaker);</span><br></pre></td></tr></table></figure><p>来分析完成一个布局属性 <code>top</code> 的过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make.top.equalTo(superview.mas_top).offset(10);</span><br></pre></td></tr></table></figure><ol><li><code>.top</code> 生成一个 <code>MASViewConstraint: MASConstraint</code> 约束实例 <code>constraint</code>，并加入到 <code>make</code> 持有的 <code>constraints</code> 数组中。最后再把这个 <code>constraint</code> 返回。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.constraints addObject:newConstraint];</span><br></pre></td></tr></table></figure><ol start="2"><li><code>.equalTo</code> 返回一个接受 <code>MASViewConstraint</code> 实例为参数的 block，接着将 <code>superview.mas_top</code> 生成的 <code>MASViewConstraint</code> 实例传入 block 实现调用。调用完成后返回👆<strong>1</strong> 中的 <code>constraint</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (MASViewAttribute *)mas_top &#123;</span><br><span class="line">    return [[MASViewAttribute alloc] initWithView:self layoutAttribute:NSLayoutAttributeTop];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>.offet</code> 还是照例返回一个接受参数类型为 <code>CGFloat</code> 的 block，接着将 <code>10</code> 传进去调用 block 并返回 <code>self</code> 也就是 1 中的 <code>constraint</code>。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (MASConstraint * (^)(CGFloat))offset &#123;</span><br><span class="line">    return ^id(CGFloat offset)&#123;</span><br><span class="line">        self.offset = offset;</span><br><span class="line">        return self;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置完所有需要的布局属性后，最后再执行 <code>[constraintMaker install]</code>，这一步会将 <code>constraintMaker</code> 也就是回调参数的 <code>make</code> 所持有的 <code>constraints</code> 数组里的所有 <code>constraint</code> 真正 <code>install</code> 到布局里面（其实真正做的事情是 <code>[superview addConstraint:]</code>），最后再将 <code>constraints</code> 返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return [constraintMaker install];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSArray *constraints = self.constraints.copy;</span><br><span class="line">for (MASConstraint *constraint in constraints) &#123;</span><br><span class="line">    [constraint install];</span><br><span class="line">&#125;</span><br><span class="line">[self.constraints removeAllObjects];</span><br><span class="line">return constraints;</span><br></pre></td></tr></table></figure><p>更多细节这里就不详细展开了。下面是实践的部分代码。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol><li>使用 <code>Masonry</code> 进行对 <code>UITableViewCell</code> 子视图进行布局。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// add constraints for titleLabel</span><br><span class="line">[_titleLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.top.equalTo(superview.mas_top).offset(20);</span><br><span class="line">    make.leading.equalTo(superview.mas_leading).offset(10);</span><br><span class="line">    make.trailing.equalTo(superview.mas_trailing).offset(-10);</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">/// add constraints for contentLabel</span><br><span class="line">[_contentLabel mas_makeConstraints:^(MASConstraintMaker *make) &#123;</span><br><span class="line">    make.top.equalTo(self.titleLabel.mas_bottom).offset(10);</span><br><span class="line">    make.leading.equalTo(self.titleLabel.mas_leading).offset(0);</span><br><span class="line">    make.trailing.equalTo(self.titleLabel.mas_trailing).offset(0);</span><br><span class="line">    make.bottom.equalTo(superview.mas_bottom).offset(-10);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><ol start="2"><li>使用第一种原生的自动布局方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/// add constraints for titleLabel</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeTop</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:superview</span><br><span class="line">                                                      attribute:NSLayoutAttributeTop</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:20.0]];</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeLeading</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:superview</span><br><span class="line">                                                      attribute:NSLayoutAttributeLeading</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:10.0]];</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeTrailing</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:superview</span><br><span class="line">                                                      attribute:NSLayoutAttributeTrailing</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:-10.0]];</span><br><span class="line"></span><br><span class="line">/// add constraints for contentLabel</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_contentLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeTop</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeBottom</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:10.0]];</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_contentLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeLeading</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeLeading</span><br><span class="line">                                                     multiplier:1.0 constant:0.0]];</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_contentLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeTrailing</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:_titleLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeTrailing</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:0.0]];</span><br><span class="line">[superview addConstraint:[NSLayoutConstraint constraintWithItem:_contentLabel</span><br><span class="line">                                                      attribute:NSLayoutAttributeBottom</span><br><span class="line">                                                      relatedBy:NSLayoutRelationEqual</span><br><span class="line">                                                         toItem:superview</span><br><span class="line">                                                      attribute:NSLayoutAttributeBottom</span><br><span class="line">                                                     multiplier:1.0</span><br><span class="line">                                                       constant:-10.0]];</span><br></pre></td></tr></table></figure><ol start="3"><li>使用第二种原生自动布局的方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/// add constraints for titleLabel</span><br><span class="line">[superview addConstraint:[_titleLabel.topAnchor constraintEqualToAnchor:superview.topAnchor constant:20]];</span><br><span class="line">[superview addConstraint:[_titleLabel.leadingAnchor constraintEqualToAnchor:superview.leadingAnchor constant:10]];</span><br><span class="line">[superview addConstraint:[_titleLabel.trailingAnchor constraintEqualToAnchor:superview.trailingAnchor constant:-10]];</span><br><span class="line"></span><br><span class="line">/// add constraints for contentLabel</span><br><span class="line">[superview addConstraint:[_contentLabel.topAnchor constraintEqualToAnchor:_titleLabel.bottomAnchor constant:10]];</span><br><span class="line">[superview addConstraint:[_contentLabel.leadingAnchor constraintEqualToAnchor:_titleLabel.leadingAnchor constant:0]];</span><br><span class="line">[superview addConstraint:[_contentLabel.trailingAnchor constraintEqualToAnchor:_titleLabel.trailingAnchor constant:0]];</span><br><span class="line">[superview addConstraint:[_contentLabel.bottomAnchor constraintEqualToAnchor:superview.bottomAnchor constant:-10]];</span><br></pre></td></tr></table></figure><p>由上面可以看出第一种和第三种方式的代码量已经很接近了，可以考虑使用第三种方式替换掉第一种。</p><p>需要注意的是使用 <b><font size=4, color=#32CD32>原生</font></b> 的自动布局方式，必须要设置 <code>view.translatesAutoresizingMaskIntoConstraints = NO</code>，否则约束会报错。</p><p>在使用第三种方式的时候，对 <code>.leadingAnchor</code> 和 <code>.leftAnchor</code> 以及 <code>trailingAnchor</code> 和 <code>rightAnchor</code> 的差别产生了纠结。</p><h5 id="leadingAnchor"><a href="#leadingAnchor" class="headerlink" title="leadingAnchor"></a>leadingAnchor</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A layout anchor representing the leading edge of the view’s frame.</span><br></pre></td></tr></table></figure><h5 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use this anchor to create constraints with the view’s leading edge. You can combine this anchor only with a subset of the NSLayoutXAxisAnchor anchors. You can combine a UIView with another leadingAnchor, a trailingAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.</span><br></pre></td></tr></table></figure><hr><h5 id="leftAnchor"><a href="#leftAnchor" class="headerlink" title="leftAnchor"></a>leftAnchor</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A layout anchor representing the left edge of the view’s frame.</span><br></pre></td></tr></table></figure><h5 id="Discussion-1"><a href="#Discussion-1" class="headerlink" title="Discussion"></a>Discussion</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Use this anchor to create constraints with the view’s left edge. You can combine this anchor only with a subset of the NSLayoutXAxisAnchor anchors. You can combine a UIView with another leftAnchor, a rightAnchor, or a centerXAnchor. For more information, see NSLayoutAnchor.</span><br></pre></td></tr></table></figure><p>对比这上面看了后发现并没有什么不同。于是在官方文档中一顿找，终于在 <a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW1">Anatomy of a Constraint</a> 找到了区别的对比表。一目了然，原来是和布局方向有关。</p><img src="/2019/03/20/Self-adaptive-UITableViewCell-Height/leading-vs-left-and-trailing-vs-right.jpg" class=""><p><b><font size=4, color=#32CD32> Demo 地址 <a href="https://github.com/smilingmiao/UITableViewFittingHeight">GitHub</a> </font></b></p><p>– EOF –</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW1">https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html#//apple_ref/doc/uid/TP40010853-CH9-SW1</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Masonry&quot;&gt;&lt;a href=&quot;#Masonry&quot; class=&quot;headerlink&quot; title=&quot;Masonry&quot;&gt;&lt;/a&gt;Masonry&lt;/h3&gt;&lt;p&gt;在戴铭老师的专栏第三篇&lt;a href=&quot;https://time.geekbang.org/column/article/85332&quot;&gt;文章&lt;/a&gt;，评论中有人提到使用 AutoLayout 布局来实现 UITableViewCell 高度自适应的问题。在评论中，戴铭老师给出了解决&lt;a href=&quot;https://github.com/ming1016/study/wiki/Masonry&quot;&gt;方案&lt;/a&gt;。我经过自己写 demo 实践了一下的确是可以的，当然直接使用 Xib 布局好加载到 UITableView 中也行。在读 &lt;a href=&quot;https://github.com/SnapKit/Masonry&quot;&gt;Masonry&lt;/a&gt; 源码过程中，我惊叹于作者使用 block 的巧妙思路，简直可以叫 Blocksonry 了。通过 chainable syntax 点语法返回对象或 block，这样就点点点就完成了一系列函数调用，实在巧妙。下面是个例子。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://github.com/smilingmiao/2019/03/18/git-newbie/"/>
    <id>https://github.com/smilingmiao/2019/03/18/git-newbie/</id>
    <published>2019-03-17T16:00:00.000Z</published>
    <updated>2020-05-31T15:19:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Git-概述"><a href="#Git-概述" class="headerlink" title=" Git 概述 "></a><font color=#32CD32> Git 概述 </font></h4><p><strong>Git</strong> 是一个<strong>分布式版本控制软件</strong>，最初由林纳斯·托瓦兹创作，于 2005 年以 GPL 发布。林纳斯·托瓦兹自嘲地取了这个名字 “git”，该词源自英国俚语，意思大约是“混账”。完整的学习资料可以在 <a href="https://git-scm.com/book/zh/v2">这里</a> 找到。软件可以在 <a href="https://git-scm.com/downloads">这里</a> 找到。</p><span id="more"></span><h4 id="Git-配置"><a href="#Git-配置" class="headerlink" title=" Git 配置 "></a><font color=#32CD32> Git 配置 </font></h4><h6 id="Git-配置分为三种：local-和-global-以及-system"><a href="#Git-配置分为三种：local-和-global-以及-system" class="headerlink" title="Git 配置分为三种：local 和 global 以及 system"></a>Git 配置分为三种：<code>local</code> 和 <code>global</code> 以及 <code>system</code></h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">## 添加配置</span><br><span class="line">git config [--local | --global | --system] user.name &#x27;Your name&#x27;</span><br><span class="line">git config [--local | --global | --system] user.email &#x27;Your email&#x27;</span><br><span class="line"></span><br><span class="line">## 查看配置</span><br><span class="line">git config --list [--local | --global | --system]</span><br><span class="line"></span><br><span class="line">## 区别</span><br><span class="line">local: 作用于本仓库</span><br><span class="line">global: 作用于当前用户的所有仓库</span><br><span class="line">system: 作用于本系统的所有用户的所有仓库</span><br></pre></td></tr></table></figure><p>需要说明的是，<code>git config</code> 遵循最小配置原则，也就是如果同时设置了 <code>local</code> 和 <code>global</code> 的话，那么只有 <code>local</code> 会起作用。</p><h4 id="创建-Git-仓库"><a href="#创建-Git-仓库" class="headerlink" title=" 创建 Git 仓库 "></a><font color=#32CD32> 创建 Git 仓库 </font></h4><h6 id="建仓库分为两种场景："><a href="#建仓库分为两种场景：" class="headerlink" title="建仓库分为两种场景："></a>建仓库分为两种场景：</h6><ul><li>将已有的项目使用 Git 管理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd 项目所在文件夹</span><br><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>新建项目并用 Git 管理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 将要存放项目的文件夹</span><br><span class="line">git init project_directory</span><br><span class="line">cd project_directory</span><br></pre></td></tr></table></figure><h4 id="Git-文件重命名"><a href="#Git-文件重命名" class="headerlink" title=" Git 文件重命名 "></a><font color=#32CD32> Git 文件重命名 </font></h4><h6 id="重命名比较简单，直接执行"><a href="#重命名比较简单，直接执行" class="headerlink" title="重命名比较简单，直接执行"></a>重命名比较简单，直接执行</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mv original_filename new_filename</span><br></pre></td></tr></table></figure><h4 id="Git-删除不想要的分支"><a href="#Git-删除不想要的分支" class="headerlink" title=" Git 删除不想要的分支 "></a><font color=#32CD32> Git 删除不想要的分支 </font></h4><h6 id="找到分支名，执行删除命令"><a href="#找到分支名，执行删除命令" class="headerlink" title="找到分支名，执行删除命令"></a>找到分支名，执行删除命令</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -av</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D branch_name</span><br></pre></td></tr></table></figure><h4 id="修改-commit-message"><a href="#修改-commit-message" class="headerlink" title=" 修改 commit message "></a><font color=#32CD32> 修改 commit message </font></h4><ul><li>修改最新的 <code>commit message</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>​在交互式界面中修改完 <code>commit message</code> 保存退出来即可。</p><ul><li>修改旧的 <code>commit message</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i base_commit_id</span><br></pre></td></tr></table></figure><p>​在交互式界面中根据 <code>Comment</code> 提示信息基于 base commit 执行 reword 修改，保存退出。</p><h4 id="整理-commit"><a href="#整理-commit" class="headerlink" title=" 整理 commit "></a><font color=#32CD32> 整理 commit </font></h4><ul><li>整理连续的几个 commit</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i base_commit_id</span><br></pre></td></tr></table></figure><p>​在交互式界面中基于 base commit 执行 squash 修改，保存退出。</p><ul><li>整理间隔的几个 commit</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i base_commit_id</span><br></pre></td></tr></table></figure><p>​在交互式界面中，将 base_commit_id 复制到首行，并且把需要和 base_commit 合并的 commit_id 剪切到首行下面。然后执行 squash 操作，保存退出。</p><h4 id="比较暂存区和-HEAD-指向文件的差异"><a href="#比较暂存区和-HEAD-指向文件的差异" class="headerlink" title=" 比较暂存区和 HEAD 指向文件的差异 "></a><font color=#32CD32> 比较暂存区和 HEAD 指向文件的差异 </font></h4><p>这里是比较的暂存区和 HEAD 指向分支最新 <code>commit</code> 的区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h4 id="比较工作区和暂存区的差异"><a href="#比较工作区和暂存区的差异" class="headerlink" title=" 比较工作区和暂存区的差异 "></a><font color=#32CD32> 比较工作区和暂存区的差异 </font></h4><ul><li>比较全部的差异</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure><ul><li>比较某几个文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff -- fileA fileB fileC fileD</span><br></pre></td></tr></table></figure><h4 id="暂存区恢复成和-HEAD-一样"><a href="#暂存区恢复成和-HEAD-一样" class="headerlink" title=" 暂存区恢复成和 HEAD 一样 "></a><font color=#32CD32> 暂存区恢复成和 HEAD 一样 </font></h4><ul><li>通过重置 HEAD 使得暂存区 Stage 内容恢复到工作区</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><ul><li>检查是否恢复成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><h4 id="工作区的文件恢复为与暂存区一样"><a href="#工作区的文件恢复为与暂存区一样" class="headerlink" title=" 工作区的文件恢复为与暂存区一样 "></a><font color=#32CD32> 工作区的文件恢复为与暂存区一样 </font></h4><ul><li>先查看状态</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><ul><li>根据提示丢弃掉工作区的内容</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --filename</span><br></pre></td></tr></table></figure><ul><li>检查一下是否恢复成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --filename</span><br></pre></td></tr></table></figure><h4 id="取消暂存区部分文件的更改"><a href="#取消暂存区部分文件的更改" class="headerlink" title=" 取消暂存区部分文件的更改 "></a><font color=#32CD32> 取消暂存区部分文件的更改 </font></h4><ul><li>和【暂存区恢复成和 HEAD 一样】略有不同</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD --fileA fileB fileC fileD</span><br></pre></td></tr></table></figure><h4 id="消除最近几次提交"><a href="#消除最近几次提交" class="headerlink" title=" 消除最近几次提交 "></a><font color=#32CD32> 消除最近几次提交 </font></h4><ul><li>使用 —hard 命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard specific_commit_id</span><br></pre></td></tr></table></figure><ul><li>使用 <code>gitk</code> 或者 <code>git log</code> 查看</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk --all</span><br></pre></td></tr></table></figure><h4 id="比较不同提交的差异"><a href="#比较不同提交的差异" class="headerlink" title=" 比较不同提交的差异 "></a><font color=#32CD32> 比较不同提交的差异 </font></h4><p>比较两个分支的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2</span><br></pre></td></tr></table></figure><p>比较两个分支的同一个文件的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff branch1 branch2 --filename</span><br></pre></td></tr></table></figure><p>​或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff 分支1的commit_id 分支2的commit_id</span><br></pre></td></tr></table></figure><h4 id="删除文件"><a href="#删除文件" class="headerlink" title=" 删除文件 "></a><font color=#32CD32> 删除文件 </font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm filename</span><br></pre></td></tr></table></figure><p>备注：可以使用 <code>git reset —hard HEAD</code> 可以让工作区和暂存区恢复成与 HEAD 一样。</p><h4 id="临时加塞紧急任务，保存好当前的状态"><a href="#临时加塞紧急任务，保存好当前的状态" class="headerlink" title=" 临时加塞紧急任务，保存好当前的状态 "></a><font color=#32CD32> 临时加塞紧急任务，保存好当前的状态 </font></h4><p>将当前未完成的工作区以及暂存区的状态暂时存储起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>查看当前存储的状态</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure><p>临时紧急任务完成后，再把存储起来的状态恢复出来。这里有 <code>apply</code> 和 <code>pop</code> 两种方式，区别是：apply 的话，原来 stash 的状态还保留，pop 的话就会把把状态从原来的 stash 中删除。</p><h4 id="添加忽略文件"><a href="#添加忽略文件" class="headerlink" title=" 添加忽略文件 "></a><font color=#32CD32> 添加忽略文件 </font></h4><p>使用 <code>vim</code> 命令新建并编辑 <code>.gitignore</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi .gitignore</span><br></pre></td></tr></table></figure><p>添加需要忽略的文件，<a href="https://github.com/github/gitignore">这里</a> 有各种语言的模板，复制下来加到自己的 .gitignore 里面即可。</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.dSYM</span><br></pre></td></tr></table></figure><p>如果是已经提交仓库的文件想要执行忽略操作，可以先把文件名添加到 <code>.gitignore</code>，然后再这么做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached filename</span><br></pre></td></tr></table></figure><h4 id="本地备份"><a href="#本地备份" class="headerlink" title=" 本地备份 "></a><font color=#32CD32> 本地备份 </font></h4><p>进入到存在备份文件的目录下，执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare file:///path_of_source/.git name_of_backup.git</span><br></pre></td></tr></table></figure><p><code>file:///</code> 是文件协议，即 scheme。</p><p><strong>当前开发的项目与远端关联</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add name_of_what_you_like file:///path_of_destination/name_of_backup.git</span><br></pre></td></tr></table></figure><h4 id="同步本地仓库到-GitHub"><a href="#同步本地仓库到-GitHub" class="headerlink" title=" 同步本地仓库到 GitHub "></a><font color=#32CD32> 同步本地仓库到 GitHub </font></h4><p>先配置一下公私钥，具体操作前往 <a href="https://help.github.com/en">GitHub Help</a> 搜索 <code>ssh</code> 来寻找需要的答案</p><p>在 GitHub 建一个空仓库，并复制仓库的 ssh 地址，在终端执行下面的命令来把本地和 GitHub 的仓库关联起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add github git@github.com:smilingmiao/Python.git</span><br></pre></td></tr></table></figure><p>再执行 <code>push</code> 操作，把本地的文件推到 GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github --all</span><br></pre></td></tr></table></figure><p>不出意外的话，这个时候会出现 <code>master</code> 分支 <code>push</code> 失败的错误提示，这个时候照着提示操作 <code>fetch</code> 一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch github master</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --allow-unrelated-histories github/master</span><br></pre></td></tr></table></figure><p>进入交互界面可以改也可以不改，保存退出。</p><p>然后再执行 <code>push</code> 操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push github master</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><h4 id="Git-拉取远程分支到本地"><a href="#Git-拉取远程分支到本地" class="headerlink" title=" Git 拉取远程分支到本地 "></a><font color=#32CD32> Git 拉取远程分支到本地 </font></h4><p>初始化仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>如果是 local 配置的话，先</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config —local user.name  = &#x27;yourname&#x27;</span><br></pre></td></tr></table></figure><p>再</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config —local user.email = &#x27;youremail&#x27;</span><br></pre></td></tr></table></figure><p>添加 <code>remote</code> 仓库地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;local_repo_name&gt; &#x27;仓库地址&#x27;</span><br></pre></td></tr></table></figure><p><code>Fetch</code> 远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote_repo_name&gt; 远程分支名</span><br></pre></td></tr></table></figure><p>创建并切换到本地分支，该本地分支与远程分支对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 本地分支名 &lt;remote_repo_name&gt;/远程分支名</span><br></pre></td></tr></table></figure><p>Pull 远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 远程分支名</span><br></pre></td></tr></table></figure><h4 id="本地与远程分支不同步"><a href="#本地与远程分支不同步" class="headerlink" title=" 本地与远程分支不同步 "></a><font color=#32CD32> 本地与远程分支不同步 </font></h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote update origin --prune</span><br><span class="line">或者</span><br><span class="line">git pull -p 再手动删本地分支</span><br></pre></td></tr></table></figure><h4 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h4><h4 id="Command-line-instructions"><a href="#Command-line-instructions" class="headerlink" title="Command line instructions"></a>Command line instructions</h4><p>You can also upload existing files from your computer using the instructions below.</p><h5 id="Git-global-setup"><a href="#Git-global-setup" class="headerlink" title="Git global setup"></a>Git global setup</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;zhangsan&quot;</span><br><span class="line">git config --global user.email &quot;zhangsan@test.com&quot;</span><br></pre></td></tr></table></figure><h5 id="Create-a-new-repository"><a href="#Create-a-new-repository" class="headerlink" title="Create a new repository"></a>Create a new repository</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@192.168.20.223:zhangsan/demo.git</span><br><span class="line">cd demo</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h5 id="Push-an-existing-folder"><a href="#Push-an-existing-folder" class="headerlink" title="Push an existing folder"></a>Push an existing folder</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@192.168.20.223:zhangsan/demo.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h5 id="Push-an-existing-Git-repository"><a href="#Push-an-existing-Git-repository" class="headerlink" title="Push an existing Git repository"></a>Push an existing Git repository</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin git@192.168.20.223:zhangsan/demo.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;Git-概述&quot;&gt;&lt;a href=&quot;#Git-概述&quot; class=&quot;headerlink&quot; title=&quot; Git 概述 &quot;&gt;&lt;/a&gt;&lt;font color=#32CD32&gt; Git 概述 &lt;/font&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; 是一个&lt;strong&gt;分布式版本控制软件&lt;/strong&gt;，最初由林纳斯·托瓦兹创作，于 2005 年以 GPL 发布。林纳斯·托瓦兹自嘲地取了这个名字 “git”，该词源自英国俚语，意思大约是“混账”。完整的学习资料可以在 &lt;a href=&quot;https://git-scm.com/book/zh/v2&quot;&gt;这里&lt;/a&gt; 找到。软件可以在 &lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;这里&lt;/a&gt; 找到。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://github.com/smilingmiao/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Mac Tips 集合</title>
    <link href="https://github.com/smilingmiao/2019/03/16/mac-tips-set/"/>
    <id>https://github.com/smilingmiao/2019/03/16/mac-tips-set/</id>
    <published>2019-03-15T16:00:00.000Z</published>
    <updated>2020-05-17T16:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><b><font size=5 color=#F00056> 解决 gitk 在 Mac Retina 屏幕模糊的问题 </font></b></p></blockquote><h5 id="先给-Mac-开启系统完整性保护（System-Integrity-Protection-SIP）"><a href="#先给-Mac-开启系统完整性保护（System-Integrity-Protection-SIP）" class="headerlink" title="先给 Mac 开启系统完整性保护（System Integrity Protection, SIP）"></a>先给 Mac 开启系统完整性保护（System Integrity Protection, SIP）</h5><ol><li>在终端中输入 <code>csrutil status</code> 并回车，检查当前状态是是 <code>enabled</code> 还是 <code>disabled</code>。</li><li>如果是 <code>enabled</code> 的话，重启 Mac，按住 command+R 进入恢复模式</li><li>打开终端，输入 <code>csrutil disable 回车</code></li><li>重启 Mac 后重复步骤1验证一下如果开启继续执行下面的步骤</li></ol><span id="more"></span><h5 id="修改-Wish-app-的-Info-plist"><a href="#修改-Wish-app-的-Info-plist" class="headerlink" title="修改 Wish.app 的 Info.plist"></a>修改 Wish.app 的 Info.plist</h5><ol><li><p>进入 <code>/System/Library/Frameworks/Tk.framework/Version/8.5/Resources/</code> 下面（直接键入这条完整命令，而不是前面加 <code>cd</code>），在 info.plist 中添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;key&gt;NSHighResolutionCapable&lt;/key&gt;</span><br><span class="line">&lt;true/&gt;</span><br></pre></td></tr></table></figure></li><li><p>重启 Mac 进入恢复模式再改回 <code>csrutil enabled</code> 状态，然后再重启就 OK 啦。</p></li></ol><p>*<font size=4 color=orange>更新</font></p><p>照着上面的步骤一顿操作还是不起作用。然后你 【gitk Mac 模糊】的时候满屏出来的都是上面的解决方案。大概是过时了吧，现在的 macOS Mojave 已经不再支持了。</p><p>所以新的方法如下：</p><ol><li>下载 <strong><a href="http://retinizer.mikelpr.com/">Retinizer</a></strong> ，解压后打开软件</li><li>将 &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Tk.framework&#x2F;Version&#x2F;8.5&#x2F;Resources&#x2F; 下面的 Wish.app 拖入 <strong>Retinizer</strong> 软件中，It works，Over</li></ol><p>– EOF –</p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://superuser.com/questions/620824/is-it-possible-to-have-git-gui-gitk-look-good-on-a-retina-macbook-pro">Is-it-possible-to-have-git-gui-gitk-look-good-on-a-retina-macbook-pro</a><br><a href="http://www.voidcn.com/article/p-omsfkaew-bkd.html">Mac Retina解决gitk模糊的问题</a><br><a href="https://www.jianshu.com/p/fe78d2036192">Mac开启关闭SIP（系统完整性保护）</a></p><p>*更新<br><a href="https://zyfdegh.github.io/post/201806-gitk-retina/">让 macOS 中的 gitk 支持高清显示</a><br><a href="http://retinizer.mikelpr.com/">http://retinizer.mikelpr.com/</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;font size=5 color=#F00056&gt; 解决 gitk 在 Mac Retina 屏幕模糊的问题 &lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;先给-Mac-开启系统完整性保护（System-Integrity-Protection-SIP）&quot;&gt;&lt;a href=&quot;#先给-Mac-开启系统完整性保护（System-Integrity-Protection-SIP）&quot; class=&quot;headerlink&quot; title=&quot;先给 Mac 开启系统完整性保护（System Integrity Protection, SIP）&quot;&gt;&lt;/a&gt;先给 Mac 开启系统完整性保护（System Integrity Protection, SIP）&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;在终端中输入 &lt;code&gt;csrutil status&lt;/code&gt; 并回车，检查当前状态是是 &lt;code&gt;enabled&lt;/code&gt; 还是 &lt;code&gt;disabled&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果是 &lt;code&gt;enabled&lt;/code&gt; 的话，重启 Mac，按住 command+R 进入恢复模式&lt;/li&gt;
&lt;li&gt;打开终端，输入 &lt;code&gt;csrutil disable 回车&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启 Mac 后重复步骤1验证一下如果开启继续执行下面的步骤&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://github.com/smilingmiao/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>iOS 开发 Tips 集合</title>
    <link href="https://github.com/smilingmiao/2019/03/01/iOS-Tips-in-Development/"/>
    <id>https://github.com/smilingmiao/2019/03/01/iOS-Tips-in-Development/</id>
    <published>2019-02-28T16:00:00.000Z</published>
    <updated>2020-05-17T16:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><b><font size=5 color=#F00056> 主要记录一些开发中遇到的小知识 </font></b></p></blockquote><h5 id="HTTPS-证书配置相关"><a href="#HTTPS-证书配置相关" class="headerlink" title="HTTPS 证书配置相关"></a>HTTPS 证书配置相关</h5><p>服务端给的 .pem 格式的证书（xxx.pem），通过以下命令转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -inform PEM -in xxx.pem -outform DER -out certificate.cer</span><br></pre></td></tr></table></figure><span id="more"></span><p>简单配置 AFSecurityPolicy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">NSString *cerPath = [[NSBundle mainBundle] pathForResource:@&quot;certificateName&quot;</span><br><span class="line">                                                        ofType:@&quot;cer&quot;];</span><br><span class="line">NSError * __autoreleasing *error = nil;</span><br><span class="line">NSData *cerData = [NSData dataWithContentsOfFile:cerPath</span><br><span class="line">                                         options:NSDataReadingMappedIfSafe</span><br><span class="line">                                           error:error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">    [NSException exceptionWithName:NSObjectInaccessibleException</span><br><span class="line">                            reason:@&quot;读取文件异常&quot;</span><br><span class="line">                          userInfo:nil];    </span><br><span class="line">&#125;</span><br><span class="line">AFSecurityPolicy *policy = [AFSecurityPolicy policyWithPinningMode:AFSSLPinningModeCertificate withPinnedCertificates:[NSSet setWithObject:cerData]];</span><br><span class="line">policy.allowInvalidCertificates = NO;</span><br><span class="line">policy.validatesDomainName = YES;</span><br></pre></td></tr></table></figure><h5 id="iOS-计算通话时长（不足1小时），单位为秒"><a href="#iOS-计算通话时长（不足1小时），单位为秒" class="headerlink" title="iOS 计算通话时长（不足1小时），单位为秒"></a>iOS 计算通话时长（不足1小时），单位为秒</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSDate *beginDate = [NSDate date];</span><br><span class="line">// 若干秒后...</span><br><span class="line">NSTimeInterval delta = -[beginDate timeIntervalSinceNow];</span><br><span class="line">NSUInteger seconds = ((NSUInteger)delta) % (3600*24) % 3600;</span><br></pre></td></tr></table></figure><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;font size=5 color=#F00056&gt; 主要记录一些开发中遇到的小知识 &lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;HTTPS-证书配置相关&quot;&gt;&lt;a href=&quot;#HTTPS-证书配置相关&quot; class=&quot;headerlink&quot; title=&quot;HTTPS 证书配置相关&quot;&gt;&lt;/a&gt;HTTPS 证书配置相关&lt;/h5&gt;&lt;p&gt;服务端给的 .pem 格式的证书（xxx.pem），通过以下命令转换&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;openssl x509 -inform PEM -in xxx.pem -outform DER -out certificate.cer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>微信一次性订阅消息</title>
    <link href="https://github.com/smilingmiao/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/"/>
    <id>https://github.com/smilingmiao/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2020-05-17T16:17:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个类似沪江英语的引导用户关注公司公众号的需求。做的过程中还是遇到了一些小问题，于是就有了这篇短水文。</p><span id="more"></span><h4 id="•-开放平台"><a href="#•-开放平台" class="headerlink" title="• 开放平台"></a>• 开放平台</h4><ol><li><p>在微信•开放平台注册账号，申请开发者资质认证</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/wx-identify-dev.png" class=""></li><li><p>在开放平台管理中心创建应用</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/create-app.png" class=""></li><li><p>点击👆步骤 2 图中的查看，可以看到下图中获得的所有接入微信的能力</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/all-power.png" class=""></li><li><p>点击 查看模板id 得到微信一次性订阅消息的 id</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/once-subscribe-id.jpg" class=""></li><li><p>到 开发资源 的 资源下载 找到对应的 SDK 按照文档集成到你的项目，以 iOS 为例，如下：</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/intergrate-wx-sdk.jpg" class=""></li></ol><h4 id="•-工程配置及代码"><a href="#•-工程配置及代码" class="headerlink" title="• 工程配置及代码"></a>• 工程配置及代码</h4><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在 Targets - Info - URL Types 中进行 URL Scheme 配置，这一步很关键，只有配置了这一步微信才能打开你的 App。Identifier 填 <code>weixin</code>，URL Schemes 填微信平台获得的 AppId。</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/setup-url-scheme.png" class=""><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>在 AppDelegate 中使用从微信开放平台获得的 <strong>AppID</strong> 向微信注册，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</span><br><span class="line">    self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</span><br><span class="line">    [self.window makeKeyAndVisible];</span><br><span class="line">    // 向微信注册</span><br><span class="line">    [WXApi registerApp:kWXAppId];</span><br><span class="line">    </span><br><span class="line">    return YES;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再设置处理回调的代理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary&lt;UIApplicationOpenURLOptionsKey,id&gt; *)options &#123;</span><br><span class="line">    return [WXApi handleOpenURL:url delegate:[WXApiManager sharedManager]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="根据微信开放平台的文档-移动应用一次性订阅消息开发指南"><a href="#根据微信开放平台的文档-移动应用一次性订阅消息开发指南" class="headerlink" title="根据微信开放平台的文档 - 移动应用一次性订阅消息开发指南"></a>根据微信开放平台的文档 - <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1500434436_aWfqW&token=70912b36bbfd5b4a29db91aabfa57c8a69a65e73&lang=zh_CN">移动应用一次性订阅消息开发指南</a></h5><ol><li><p>向微信发起一次性订阅授权请求，在微信中点击【确认接收】后，微信会拉起我们自己的应用，并在我们自己的应用内收到微信的回调消息，最重要的是授权用户的 openid，这个后面在给微信下发模板消息时候需要。</p></li><li><p>获取 access_token，在文档 <a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1500434436_aWfqW&token=70912b36bbfd5b4a29db91aabfa57c8a69a65e73&lang=zh_CN">移动应用一次性订阅消息开发指南</a> 最后的部分有详细介绍。只是一个普通的 GET 请求。</p></li><li><p>向微信下发模板信息，这一步需要注意的是需要发 JSON 请求，不过如果使用 AFNetworking 的话就简单多了。</p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/AFJSONRequestSerializer.png" class=""><p>(1) 指定一下 requestSerializer 为 AFJSONRequestSerializer 的实例 </p><p>(2) 设置 HTTPHeaderField 中的 <code>Content-Type</code> 为 <code>application/json</code></p><img src="/2019/02/24/wei-xin-yi-ci-xing-ding-yue-xiao-xi/setup-requestSerializer.png" class=""></li></ol><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近在做一个类似沪江英语的引导用户关注公司公众号的需求。做的过程中还是遇到了一些小问题，于是就有了这篇短水文。&lt;/p&gt;</summary>
    
    
    
    
    <category term="微信" scheme="https://github.com/smilingmiao/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>从内到外探究 Git</title>
    <link href="https://github.com/smilingmiao/2019/01/31/translate-git-from-the-inside-out/"/>
    <id>https://github.com/smilingmiao/2019/01/31/translate-git-from-the-inside-out/</id>
    <published>2019-01-30T16:00:00.000Z</published>
    <updated>2020-05-17T16:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：此文是对 <a href="https://maryrosecook.com/blog/post/git-from-the-inside-out">Git from the inside out</a> 的翻译，个别地方添加了自己的实践结果，仅作理解学习之用。</p></blockquote><p>这篇文章将解释 Git 是如何工作的。相同的内容也可以在这个 <a href="https://www.youtube.com/watch?v=fCtZWGhQBvo">视频</a> 中看到。</p><span id="more"></span><p>本文假定你已经对 Git 有一定的理解并使用它来对你的项目进行版本控制。文章内容专注于支撑 Git 的图表结构和图表结构属性所决定的行为。理解基础原理，你可以基于事实构建出知识模型，而不是根据 API 的实验现象进行假设并堆砌知识。这个真实的模型让你更好的理解 Git 做了什么，正在做什么和将要做什么。</p><p>文本结构为运行在单个项目上的一系列 Git 命令。每隔一段时间，就会观察到Git所构建的图形数据结构。这些观察说明了图的一个属性以及该属性产生的行为。</p><p>阅读后，如果你期望对 Git 有更深的理解，可以看作者用 JavaScript 实现的 Git <a href="http://gitlet.maryrosecook.com/docs/gitlet.html">代码</a>。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  mkdir alpha</span><br><span class="line">➜  cd alpha</span><br></pre></td></tr></table></figure><p>使用者创建了 alpha，用来存放项目的一个文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha mkdir data</span><br><span class="line">➜  alpha printf &#x27;a&#x27; &gt; data/letter.txt</span><br></pre></td></tr></table></figure><p>进入 alpha 目标并创建了一个文件夹 data。在 data 里面又创建了内容为<code>a</code> 的 letter.txt 文件。alpha 文件夹看起来是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alpha</span><br><span class="line">└── data</span><br><span class="line">    └── letter.txt</span><br></pre></td></tr></table></figure><h3 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git init</span><br><span class="line">Initialized empty Git repository</span><br></pre></td></tr></table></figure><p><code>git init</code> 让当前文件夹成为一个 Git 仓库。它创建了一个 .git 文件夹并写入进去了一些文件。这些文件只是没什么神秘的普通文件，它们定义了关于 Git 配置的一切以及项目的历史记录。使用者可以通过文本编辑器或 shell 阅读和编辑他们。也就是说：使用者可以像读写项目文件一样容易地读写项目的历史记录。</p><p>alpha 文件夹现在看起来是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">alpha</span><br><span class="line">├── .git</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── branches</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── applypatch-msg.sample</span><br><span class="line">│   │   ├── commit-msg.sample</span><br><span class="line">│   │   ├── fsmonitor-watchman.sample</span><br><span class="line">│   │   ├── post-update.sample</span><br><span class="line">│   │   ├── pre-applypatch.sample</span><br><span class="line">│   │   ├── pre-commit.sample</span><br><span class="line">│   │   ├── pre-push.sample</span><br><span class="line">│   │   ├── pre-rebase.sample</span><br><span class="line">│   │   ├── pre-receive.sample</span><br><span class="line">│   │   ├── prepare-commit-msg.sample</span><br><span class="line">│   │   └── update.sample</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       └── tags</span><br><span class="line">└── data</span><br><span class="line">    └── letter.txt</span><br></pre></td></tr></table></figure><p>.git 文件夹和里面的内容是 Git 的。其它的文件统称为工作副本，他们是使用者的。</p><h3 id="添加一些文件"><a href="#添加一些文件" class="headerlink" title="添加一些文件"></a>添加一些文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git add data/letter.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── .git</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── branches</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── applypatch-msg.sample</span><br><span class="line">│   │   ├── commit-msg.sample</span><br><span class="line">│   │   ├── fsmonitor-watchman.sample</span><br><span class="line">│   │   ├── post-update.sample</span><br><span class="line">│   │   ├── pre-applypatch.sample</span><br><span class="line">│   │   ├── pre-commit.sample</span><br><span class="line">│   │   ├── pre-push.sample</span><br><span class="line">│   │   ├── pre-rebase.sample</span><br><span class="line">│   │   ├── pre-receive.sample</span><br><span class="line">│   │   ├── prepare-commit-msg.sample</span><br><span class="line">│   │   └── update.sample</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── 2e</span><br><span class="line">│   │   │   └── 65efe2a145dda7ee51d1741299f848e5bf752e</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       └── tags</span><br><span class="line">└── data</span><br><span class="line">    └── letter.txt</span><br></pre></td></tr></table></figure><p>使用者基于 <code>data/letter.txt</code> 执行了 <code>git add</code> 命令，这有两个效果。</p><p>首先，它在 .git&#x2F;objects&#x2F; 文件夹中创建了一个新的 blob 文件。这个 blob 文件包含了 <code>data/letter.txt</code> 的压缩内容。哈希化一些文本意思是通过一个程序让它变成可以确定原始文件的独一无二的更小的文本。例如，Git 将 <code>a</code> 哈希化成 <code>2e65efe2a145dda7ee51d1741299f848e5bf752e</code> 。前两个字符被用作 objects database 内部的文件名: <code>.git/objects/2e/</code>。剩余的哈希值被用作 blob 文件: <code>.git/objects/2e/65efe2a145dda7ee51d1741299f848e5bf752e</code>（保存添加文件内容）的名字。</p><p>注意如何添加一个文件到 Git 并把它的内容保存到 objects 文件夹。即使使用者从工作区删除了 data&#x2F;letter.txt，它在 Git 中的内容仍然是安全的。</p><p>其次，<code>git add</code> 把文件添加到 index(索引) 中。index 是一个列表，它作为一个文件存储在 <code>.git/index</code>，包含了 Git 需要跟踪的所有文件。文件的每一行都将跟踪的文件映射到其内容在添加时的哈希值。这是在执行命令 <code>git add</code> 后生成的 index，可以通过 <code>git ls-files -s</code> 查看。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git cat-file -p 2e65</span><br><span class="line">a%</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) ✗ git ls-files -t</span><br><span class="line">H data/letter.txt</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) ✗ git ls-files -s</span><br><span class="line">100644 2e65efe2a145dda7ee51d1741299f848e5bf752e 0data/letter.txt</span><br></pre></td></tr></table></figure><p>使用者创建了一个叫做 <code>data/number.txt</code> 的文件，内容是 <code>1234</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ printf &#x27;1234&#x27; &gt; data/number.txt</span><br></pre></td></tr></table></figure><p>工作区看起来是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alpha</span><br><span class="line">└── data</span><br><span class="line">    └── letter.txt</span><br><span class="line">    └── number.txt</span><br></pre></td></tr></table></figure><p>使用者添加了文件到 Git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git add data</span><br></pre></td></tr></table></figure><p><code>git add</code> 命令创建了一个包含 <code>data/number.txt</code> 内容的 blob object。它添加了一条 <code>data/number.txt</code> 指向 blob 的 index entry。下面是 <code>git add</code> 执行了两次的 index：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git ls-files -s</span><br><span class="line">100644 2e65efe2a145dda7ee51d1741299f848e5bf752e 0data/letter.txt</span><br><span class="line">100644 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 0data/number.txt</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) ✗ git cat-file -p 274c</span><br><span class="line">1234%</span><br></pre></td></tr></table></figure><p>注意只有 <code>data</code> 文件夹中的文件被列在 index 中，尽管使用者执行 <code>git add data</code>，<code>data</code> 文件夹并不会被分开列入 index 中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ printf &#x27;1&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git ls-files -s</span><br><span class="line">100644 2e65efe2a145dda7ee51d1741299f848e5bf752e 0data/letter.txt</span><br><span class="line">100644 274c0052dd5408f8ae2bc8440029ff67d79bc5c3 0data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git cat-file -p 274c</span><br><span class="line">1234%</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) ✗ git add data</span><br><span class="line">➜  alpha git:(master) ✗ git ls-files -s</span><br><span class="line">100644 2e65efe2a145dda7ee51d1741299f848e5bf752e 0data/letter.txt</span><br><span class="line">100644 56a6051ca2b02b04ef92d5150c9ef600403cb1de 0data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git cat-file -p 56a6</span><br><span class="line">1%                                                                              ➜  alpha git:(master) ✗ git cat-file -p 274c</span><br><span class="line">1234%</span><br></pre></td></tr></table></figure><p>当使用者起初创建 <code>data/number.txt</code>，它表示输入了 <code>1</code> 而不是 <code>1234</code>。它做了纠正并又一次将文件添加到 index。这个命令创建了一个新的 blob 及相应的内容。它更新了 index entry，使 <code>data/number.txt</code> 指向新的 blob。</p><h3 id="做一次提交"><a href="#做一次提交" class="headerlink" title="做一次提交"></a>做一次提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;a1&#x27;</span><br><span class="line">[master (root-commit) dcee3eb] a1</span><br><span class="line"> 2 files changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 data/letter.txt</span><br><span class="line"> create mode 100644 data/number.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p dcee</span><br><span class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line"></span><br><span class="line">a1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p ffe2</span><br><span class="line">040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74data</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p 0eed</span><br><span class="line">100644 blob 2e65efe2a145dda7ee51d1741299f848e5bf752eletter.txt</span><br><span class="line">100644 blob 56a6051ca2b02b04ef92d5150c9ef600403cb1denumber.txt</span><br></pre></td></tr></table></figure><p>从 <code>master</code> 分支的 root-commit 开始，这个 commit object 指向 root-tree，即 ffe2。root-tree 又指向了 data-tree，data-tree 指向了 <code>a</code> 和 <code>1</code> 的 blob。</p><p>使用者做了 <code>a1</code> 提交。Git 打印了一些关于提交的数据。这些数据将很快有意义。</p><p>提交命令有三步。它创建了一个 tree graph 表示项目版本内容 commit，又创建了一个 commit object 并将当前分支指向新的 commit object。</p><h3 id="创建一个树型图"><a href="#创建一个树型图" class="headerlink" title="创建一个树型图"></a>创建一个树型图</h3><p>Git 通过从索引创建一个树型图来记录当前项目的状态。这个树型图记录了项目中每个文件的位置和内容。图由两部分对象组成：blobs 和 trees。</p><p>下面是树对象，它记录了新提交后 <code>data</code> 目录下的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p 0eed</span><br><span class="line">100644 blob 2e65efe2a145dda7ee51d1741299f848e5bf752eletter.txt</span><br><span class="line">100644 blob 56a6051ca2b02b04ef92d5150c9ef600403cb1denumber.txt</span><br></pre></td></tr></table></figure><p>第一行记录了能使 <code>data/letter.txt</code> 恢复或重现所必须的一切。第一部分表示文件的权限。第二部分表示这个条目的内容用 blob 表示，而不是树。第三部分表示 blob 的哈希值。第四部分表示文件名。</p><p>第二行记录了 <code>data/number.txt</code> 同样的内容。</p><p>下面是项目的根目录 <code>alpha</code> 的 tree object。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p ffe2</span><br><span class="line">040000 tree 0eed1217a2947f4930583229987d90fe5e8e0b74data</span><br></pre></td></tr></table></figure><img src="/2019/01/31/translate-git-from-the-inside-out/1-a1-tree-graph.png" class=""><center><font size=2>`a1` commit 的树图</font></center><p>在上面的树图中，<code>root</code> 树指向 <code>data</code> 树。<code>data</code> 树指向 <code>data/letter.txt</code> 和 <code>data/number.txt</code>。</p><h3 id="创建一个-commit-object"><a href="#创建一个-commit-object" class="headerlink" title="创建一个 commit object"></a>创建一个 commit object</h3><p><code>git commit</code> 在创建了 tree graph 后又创建了一个 commit object。commit object 只是 .git&#x2F;objects 中的另一个文本文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line"></span><br><span class="line">a1</span><br></pre></td></tr></table></figure><p>第一行指向 tree graph，tree object 的哈希值代表了工作副本。它就是 <code>alpha</code> 目录。最后一行是 commit 信息。</p><img src="/2019/01/31/translate-git-from-the-inside-out/2-a1-commit.png" class=""><center><font size=2>`a1` commit object 指向它的树图</font></center><h5 id="当前分支指向新的-commit"><a href="#当前分支指向新的-commit" class="headerlink" title="当前分支指向新的 commit"></a>当前分支指向新的 commit</h5><p>最终，commit 命令将当前分支指向新的 commit object。哪一个是当前分支？到 <code>.git/HEAD</code> 下面发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>这也就是说 <code>HEAD</code> 是指向 <code>master</code> 的。<code>master</code> 是当前分支。</p><p><code>HEAD</code> 和 <code>master</code> 都是引用。引用是 Git 或是使用者用来确认指定 commit 的一个标签。</p><p>代表 <code>master</code> 引用的文件是不存在的，因为这是第一次 commit 到 repo。Git 在 <code>.git/refs/heads/master</code> 下创建文件并将其内容设置为 commit object（目前来说就是 [master (root-commit) dcee3eb] a1）的哈希值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cat .git/refs/heads/master</span><br><span class="line">dcee3ebc209d617beeb120ccb0f08beae454b1ab</span><br></pre></td></tr></table></figure><p>（如果你输入了这些你阅读到的 Git 命令，你的 <code>a1</code> commit 会与我的不同。blobs 和 trees object 通常有相同的哈希值，commits 不是，因为他们包含了日期和创建者的名字。）</p><p>我们把 <code>HEAD</code> 和 <code>master</code> 添加到 Git 图中：</p><img src="/2019/01/31/translate-git-from-the-inside-out/3-a1-refs.png" class=""><center><font size=2>`HEAD` 指向 `master`，`master` 指向 `a1` commit</font></center><p><code>HEAD</code> 指向 <code>master</code>，和 commit 之前一样。但是 <code>master</code> 现在存在并指向新的 commit object（<code>a1</code>）。</p><h3 id="再做一次-commit（不是第一次）"><a href="#再做一次-commit（不是第一次）" class="headerlink" title="再做一次 commit（不是第一次）"></a>再做一次 commit（不是第一次）</h3><p>下面是 <code>a1</code> commit 后的 Git 图，包含工作副本和 index。</p><img src="/2019/01/31/translate-git-from-the-inside-out/4-a1-wc-and-index.png" class=""><center><font size=2>显示 `a1` commit 的工作副本和索引</font></center><p>注意到现在工作副本，index 和 <code>a1</code> commit 都有关于 <code>data/letter.txt</code> 和 <code>data/number.txt</code> 相同的内容。index 和 <code>HEAD</code> commit 都使用哈希去引用 blob object，但是工作副本内容以文本的方式存放在不同的位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) printf &#x27;2&#x27; &gt; data/number.txt</span><br></pre></td></tr></table></figure><p>使用者将 <code>data/number.txt</code> 的内容设置成 <code>2</code>。这更新了工作副本，但是忽略了索引和 <code>HEAD</code> commit。</p><img src="/2019/01/31/translate-git-from-the-inside-out/5-a1-wc-number-set-to-2.png" class=""><center><font size=2>工作副本的 `data/number.txt` 内容设置为 `2`</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br></pre></td></tr></table></figure><p>使用者添加了文件到 Git。这添加了一个包含 <code>2</code> 的 blob 到 <code>objects</code> 目录。它将 <code>data/number.txt</code> 的索引条目指向了新的 blob。</p><img src="/2019/01/31/translate-git-from-the-inside-out/6-a1-wc-and-index-number-set-to-2.png" class=""><center><font size=2>工作副本和索引的 `data/number/txt` 设置为 `2`</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;a2&#x27;</span><br><span class="line">[master 1a3d504] a2</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者 commits。commit 的步骤和之前的相同。</p><p>首先，一个新的 tree graph 被创建来表示 index 的内容。</p><p>关于 <code>data/number.txt</code> 的 index entry 已经改变。旧的 <code>data</code> tree 不再反映数据目录的 index 状态。必须创建一个新的数据树对象:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p 1a3d504</span><br><span class="line">tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</span><br><span class="line">parent dcee3ebc209d617beeb120ccb0f08beae454b1ab</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line"></span><br><span class="line">a2</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) git cat-file -p ce72</span><br><span class="line">040000 tree 40b0318811470aaacc577485777d7a6780e51f0bdata</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) git cat-file -p 40b0</span><br><span class="line">100644 blob 2e65efe2a145dda7ee51d1741299f848e5bf752eletter.txt</span><br><span class="line">100644 blob d8263ee9860594d2806b0dfd1bfd17528b0ba2a4number.txt</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) git cat-file -p d826</span><br><span class="line">2%</span><br></pre></td></tr></table></figure><p>新的 <code>data</code> tree 哈希出一个与旧 <code>data</code> tree 不同的值（0eed -&gt; 40b0）。必须创建出一个新的 <code>root</code> tree 来记录这个哈希值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p ce72</span><br><span class="line">040000 tree 40b0318811470aaacc577485777d7a6780e51f0bdata</span><br></pre></td></tr></table></figure><p>其次，一个新的 commit object 创建出来了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git cat-file -p 1a3d504</span><br><span class="line">tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</span><br><span class="line">parent dcee3ebc209d617beeb120ccb0f08beae454b1ab</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line"></span><br><span class="line">a2</span><br></pre></td></tr></table></figure><p>执行结果的第一行表示 commit object 指向了新的 <code>root</code> tree object。第二行指向 <code>a1</code>: the commit’s parent。为了找到 parent commit，Git 转到 <code>HEAD</code>，跟随它到 <code>master</code> 并找到 <code>a1</code> 的提交哈希值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cat .git/refs/heads/master</span><br><span class="line">1a3d504bd9d202b546728568b6c09db26b5138a0</span><br><span class="line">➜  alpha git:(master) git cat-file -p 1a3d</span><br><span class="line">tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</span><br><span class="line">parent dcee3ebc209d617beeb120ccb0f08beae454b1ab</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line"></span><br><span class="line">a2</span><br><span class="line">➜  alpha git:(master) git cat-file -p dcee</span><br><span class="line">tree ffe298c3ce8bb07326f888907996eaa48d266db4</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548853784 +0800</span><br><span class="line"></span><br><span class="line">a1</span><br></pre></td></tr></table></figure><p>第三行，将 <code>master</code> 分支文件的内容设置为新 commit 的哈希值（dcee3eb -&gt; 1a3d504）。</p><img src="/2019/01/31/translate-git-from-the-inside-out/7-a2.png" class=""><center><font size=2>`a2` commit</font></center><img src="/2019/01/31/translate-git-from-the-inside-out/8-a2-just-objects-commits-and-refs.png" class=""><center><font size=2>除工作副本和 index 的 Git 图</font></center><p><strong>图属性</strong>：objects 的内容以树的方式存储。这意味着 objects database 只存储差异。看上面的树。<code>a2</code> commit 重用了之前 <code>a1</code> commit 的 <code>a</code> blob。类似的，如果一整个目录都没有变化，那它下面的 tree 和 blobs 都能重用。通常在两次 commit 之间只有很少的内容变化。这意味着 Git 能占用少量的空间来存储大的 commit 历史记录。</p><p><strong>图属性</strong>：每个 commit 都有一个 parent。这意味着一个 repo 能存储一个项目的历史记录。</p><p><strong>图属性</strong>：引用是 commit history 的一部分或另一部分的入口点。这意味着 commits 能被赋予有意义的名字。使用者管理他们的项目工作可以使用富有意义的实体引用，比如 <code>fix-for-bug-376</code> 。Git 使用象征性的引用例如：<code>HEAD</code>，<code>MERGE_HEAD</code> 和 <code>FETCH_HEAD</code> 来支持命令操作 commit history。</p><p><strong>图属性</strong>：在 <code>objects/</code> 目录下的节点是不可变的。这表示着内容能够被编辑，而不能被删除。<code>objects</code> 目录下存储着每一次 <code>git add</code> 和 <code>git commit</code> 的内容。</p><p><strong>图属性</strong>：引用是可变的。因此，一个引用是可以改变的。<code>master</code> 指向的 commit 也许是一个项目中最好的版本，但是很快它就会被一个更新更好的 commit 取代。</p><p><strong>图属性</strong>：通过指向的引用能够很容易获得工作副本和 commit，但是其它的 commits 不行。这意味着最近的 history 很容易回忆起，也最常查看。</p><p>工作区是最容易重新查看的点，因为它在根目录。查看它甚至都不需要什么 Git 命令。同时它也是 history 中最不稳定的点。使用者可以无限地修改一个文件的内容但 Git 不会记录，除非他们被执行了 <code>git add</code>。</p><p><code>HEAD</code> 指向的 commit 很容易找回。它在树枝的顶端被检出。想看它的内容，使用者可以先存快照然后检查工作副本。与此同时，<code>HEAD</code> 是最常改变的引用。</p><p>实体引用指向的 commit 很容易找回。使用者可以很简单地检出那个分支。与 <code>HEAD</code> 相比，树枝顶端不是那么容易改变，但分支名称的含义通常是会改变的。</p><p>找回一个没有被任何引用指向的 commit 是很难的。使用者离引用越远，越难以构建出一个有意义的 commit。但是，他们追溯得越久远，就越不可能有人改变了他们上次看到的历史。</p><h3 id="检出一个-commit"><a href="#检出一个-commit" class="headerlink" title="检出一个 commit"></a>检出一个 commit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git checkout 1a3d504</span><br><span class="line">Note: checking out &#x27;1a3d504&#x27;.</span><br><span class="line"></span><br><span class="line">You are in &#x27;detached HEAD&#x27; state. You can look around, make experimental</span><br><span class="line">changes and commit them, and you can discard any commits you make in this</span><br><span class="line">state without impacting any branches by performing another checkout.</span><br><span class="line"></span><br><span class="line">If you want to create a new branch to retain commits you create, you may</span><br><span class="line">do so (now or later) by using -b with the checkout command again. Example:</span><br><span class="line"></span><br><span class="line">  git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"></span><br><span class="line">HEAD is now at 1a3d504 a2</span><br></pre></td></tr></table></figure><p>使用者使用哈希值检出了 <code>a2</code> commit。（如果你运行这些 Git 命令，这将不能工作。使用 <code>git log</code> 找到 <code>a2</code> commit 的哈希值。）</p><p>检出分为四步：</p><p>第一，Git 得到 <code>a2</code> commit 和 它指向的 tree graph。</p><p>第二，它将 tree graph 中的文件写入工作副本。这不会发生任何变化，工作副本已经存在写入 tree graph 的内容，并且 <code>HEAD</code> 早已通过 <code>master</code> 指向 <code>a2</code> commit。</p><p>第三，将 tree graph 中的文件条目写入 index。这也不会引起任何变化，因为 index 早已有了 <code>a2</code> commit 的内容。</p><p>第四，<code>HEAD</code> 的内容设置为 <code>a2</code> commit 的哈希值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(1a3d504) cat .git/refs/heads/master</span><br><span class="line">1a3d504bd9d202b546728568b6c09db26b5138a0</span><br><span class="line"></span><br><span class="line">➜  alpha git:(1a3d504) cat .git/HEAD</span><br><span class="line">1a3d504bd9d202b546728568b6c09db26b5138a0</span><br><span class="line"></span><br><span class="line">➜  alpha git:(1a3d504) git cat-file -p 1a3d</span><br><span class="line">tree ce72afb5ff229a39f6cce47b00d1b0ed60fe3556</span><br><span class="line">parent dcee3ebc209d617beeb120ccb0f08beae454b1ab</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1548862844 +0800</span><br><span class="line"></span><br><span class="line">a2</span><br></pre></td></tr></table></figure><blockquote><p>可见，<code>master</code> 和 <code>HEAD</code> 的内容都是 <code>a2</code> commit 了。<code>HEAD</code> 本身指向的 <code>master</code>，现在指向了 <code>a2</code>。所以头指针和之前指向的 <code>master</code> 分支分离开了，这就叫分离头指针。</p></blockquote><p>给 <code>HEAD</code> 的内容设置了哈希值使 repo 成为了分离头指针状态。注意下面的图中 <code>HEAD</code> 直接指向了 <code>a2</code> commit，而不是指向 <code>master</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/9-a2-detached-head.png" class=""><center><font size=2>分离头指针指向 `a2` commit</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(1a3d504) printf &#x27;3&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(1a3d504) ✗ cat .git/HEAD</span><br><span class="line">1a3d504bd9d202b546728568b6c09db26b5138a0</span><br><span class="line">➜  alpha git:(1a3d504) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(1a3d504) ✗ cat .git/HEAD</span><br><span class="line">1a3d504bd9d202b546728568b6c09db26b5138a0</span><br><span class="line">➜  alpha git:(1a3d504) ✗ git commit -m &#x27;a3&#x27;</span><br><span class="line">[detached HEAD 2860e63] a3</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br><span class="line">➜  alpha git:(2860e63) cat .git/HEAD</span><br><span class="line">2860e6350b7bc9a8d472ff48970f47ed711e642f</span><br></pre></td></tr></table></figure><blockquote><p>头指针又指向了新的 commit，即 <code>a3</code></p></blockquote><img src="/2019/01/31/translate-git-from-the-inside-out/10-a3-detached-head.png" class=""><center><font size=2>`a3` commit 不在分支上</font></center><h3 id="创建一个分支"><a href="#创建一个分支" class="headerlink" title="创建一个分支"></a>创建一个分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(2860e63) git branch deputy</span><br><span class="line">➜  alpha git:(2860e63) git branch</span><br><span class="line">* (HEAD detached from 1a3d504)</span><br><span class="line">  deputy</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>使用者创建了一个叫做 <code>deputy</code> 的新分支。这只是在 <code>.git/refs/heads/deputy</code> 创建了一个包含 <code>HEAD</code> 指向 <code>a3</code> commit 哈希值的新的文件。</p><p><strong>图属性</strong>：分支只是引用，引用只是文件。这意味着 Git 分支是轻量的。</p><p><code>deputy</code> 分支的创建让 <code>a3</code> commit 安全的放在一个分支上。<code>HEAD</code> 仍然是与 <code>master</code> 分离的，因为它直接指向了 commit。</p><img src="/2019/01/31/translate-git-from-the-inside-out/11-a3-on-deputy.png" class=""><center><font size=2>`a3` commit 现在在 `deputy` 分支上</font></center><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(2860e63) git checkout master</span><br><span class="line">Previous HEAD position was 2860e63 a3</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>使用者检出 <code>master</code> 分支。</p><p>第一，Git 找到 <code>master</code> 指向的 <code>a2</code> commit，再找到 <code>a2</code> commit 指向的 tree graph。</p><p>第二，Git 将 tree graph 中的文件条目写入工作副本的文件。</p><p>第三，Git 将 tree graph 中的文件条目写入 index。这会更新 <code>data/number.txt</code> 的条目为哈希 <code>2</code> 后的 blob。</p><p>第四，Git 通过将 <code>HEAD</code> 的内容从哈希值变为引用来使 <code>HEAD</code> 指向 <code>master</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(2860e63) cat .git/HEAD</span><br><span class="line">2860e6350b7bc9a8d472ff48970f47ed711e642f</span><br><span class="line"></span><br><span class="line">➜  alpha git:(master) cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><img src="/2019/01/31/translate-git-from-the-inside-out/12-a3-on-master-on-a2.png" class=""><center><font size=2>切换回指向 `a2` commit 的 `master`</font></center><h3 id="切换回与工作副本存在冲突的分支（deputy）"><a href="#切换回与工作副本存在冲突的分支（deputy）" class="headerlink" title="切换回与工作副本存在冲突的分支（deputy）"></a>切换回与工作副本存在冲突的分支（deputy）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) printf &#x27;789&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git checkout deputy</span><br><span class="line">error: Your local changes to the following files would be overwritten by checkout:</span><br><span class="line">data/number.txt</span><br><span class="line">Please commit your changes or stash them before you switch branches.</span><br><span class="line">Aborting</span><br></pre></td></tr></table></figure><p>使用者突然将 <code>data/number.txt</code> 的内容设置为 <code>789</code>。然后试图切换分支到 <code>deputy</code> 时被 Git 阻止了。</p><p><code>HEAD</code> 指向 <code>master</code>，<code>master</code> 又指向 <code>data/number.txt</code> 内容为 <code>2</code> 的 <code>a2</code> commit。<code>deputy</code> 指向<code>data/number.txt</code> 内容为 <code>3</code> 的 <code>a3</code>。工作副本的 <code>data/number</code> 内容为 <code>789</code>。所有这些版本都是不同的，而这些不同必须要去解决。</p><p>Git 能用被检出 commit 版本里的 <code>data/number.txt</code> 替换工作副本的 <code>data/number.txt</code>。但是它会不惜一切代价阻止数据丢失。</p><p>Git 能合并工作副本与检出的版本。但这是比较复杂的。</p><p>因此，Git 终止了切换分支。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ printf &#x27;2&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) git checkout deputy</span><br><span class="line">Switched to branch &#x27;deputy&#x27;</span><br></pre></td></tr></table></figure><p>我们可以看到编辑 <code>data/number.txt</code> 并将其内容设置回 <code>2</code>。现在可以成功切换到 <code>deputy</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/13-a3ondeputy.png" class=""><center><font size=2>切换到了 `deputy`</font></center><h3 id="Merge-an-ancestor"><a href="#Merge-an-ancestor" class="headerlink" title="Merge an ancestor"></a>Merge an ancestor</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git merge master</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>我们合并 <code>master</code> 到 <code>deputy</code>。合并两个分支也就是两个 commits。第一个 commit 是 <code>deputy</code> 指向的：接收者。第二个 commit 是 <code>master</code> 指向的：给予者。对于这个合并，Git 什么也不会做。它提示 <code>已经是最新的了</code>。</p><p><strong>图属性</strong>：图中的一系列提交被解释为对存储库内容所做的一系列更改。这意味着在一个合并，如果给予者 commit 是接收者 commit 的一个先辈，Git 将什么都不会做。因为那些改变早已经合并过了。</p><h3 id="Merge-a-descendent"><a href="#Merge-a-descendent" class="headerlink" title="Merge a descendent"></a>Merge a descendent</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br></pre></td></tr></table></figure><p>我们切换到了 <code>master</code> 分支。</p><img src="/2019/01/31/translate-git-from-the-inside-out/14-a3-on-master-on-a2.png" class=""><center><font size=2>切换到指向 `a2` 的 `master` 分支</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git merge deputy</span><br><span class="line">Updating 1a3d504..2860e63</span><br><span class="line">Fast-forward</span><br><span class="line"> data/number.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>把 <code>deputy</code> 合入 <code>master</code>。Git 发现接收者 commit <code>a2</code> 是给予者 commit <code>a3</code> 的先辈，它可以执行快行合入。</p><p>找到给予者的 commit 和它指向的 <code>tree graph</code>。将 <code>tree graph</code> 中的文件条目写入工作副本和 <code>index</code>。也就是 “fast-forwards” <code>master</code> 指向 <code>a3</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/15-a3-on-master.png" class=""><center><font size=2>`a3` commit 从 `deputy` 快行合入 `master`</center></font><p><strong>图属性</strong>：图中的一系列 commit 被解释为对存储库内容所做的一系列更改。这意味着，在合并中，如果给予者是接收者的后代，历史不会改变。已经有一个提交序列来描述要进行的更改：接收方和发送方之间的提交序列。但是，尽管 Git 的历史没有改变，但是 Git 的图表却改变了。HEAD 指向的具体ref 被更新为指向提交者提交。</p><h3 id="从两个-commit-合并祖系"><a href="#从两个-commit-合并祖系" class="headerlink" title="从两个 commit 合并祖系"></a>从两个 commit 合并祖系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) printf &#x27;4&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;a4&#x27;</span><br><span class="line">[master 310733e] a4</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者设置 <code>number.txt</code> 的内容为 <code>4</code>，然后 commits 改变到 <code>master</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git checkout deputy</span><br><span class="line">Switched to branch &#x27;deputy&#x27;</span><br><span class="line">➜  alpha git:(deputy) printf &#x27;b&#x27; &gt; data/letter.txt</span><br><span class="line">➜  alpha git:(deputy) ✗ git add data/letter.txt</span><br><span class="line">➜  alpha git:(deputy) ✗ git commit -m &#x27;b3&#x27;</span><br><span class="line">[deputy cee5a72] b3</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者切换到 <code>deputy</code>。然后设置 <code>data/letter.txt</code> 内容为 <code>b</code>，并提交改变到 <code>deputy</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/16-a4-b3-on-deputy.png" class=""><center><font size=2>`a4` 提交到 `master`，`b3` 提交到 `deputy`，切换到分支 `deputy`</font></center><p>图属性：commits 能够共享父 commit。这表示新的祖系可以在 commit history 中建立。</p><p>图属性：commit 能拥有多个父 commit。这表示可以由具有两个父代的 commit 将分离的祖系连接：合并提交。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git merge master -m &#x27;b4&#x27;</span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> data/number.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者把 <code>master</code> 合并到 <code>deputy</code>。</p><p>Git 发现 receiver <code>b3</code> 和 giver <code>a4</code> 是不同的祖系。它进行了合并操作，这个过程有 8 步。</p><p>第一，Git 将 giver commit 的哈希值写入 <code>alpha/.git/MERGE_HEAD</code> 文件中。这个文件的出现使得 Git 明白正在合并。</p><p>第二，Git 找到 base commit:  receiver commit 和 giver commit 共同拥有的最近的祖先。</p><img src="/2019/01/31/translate-git-from-the-inside-out/17-a4-b3-on-deputy.png" class=""><center><font size=2>`a3` 是 `a4` 和 `b3` 的 base commit</font></center><p>图属性：commits have parents。这意味着发现某个点上存在两个分叉的祖系是可能的。Git 分别从 <code>b3</code> 和 <code>a4</code> 向后回溯寻找共同的祖先，最后找到最近的共同祖先。这个共同的祖先就是 base commit。</p><p>第三，Git 从他们的 tree graph 生成 base，receiver 和 giver commits 的 indices。</p><p>第四，Git 生成了一个 diff，它结合了 receiver commit 和 giver commit 对 base 做出的改变。这个 diff 是一系列指向文件的路径，这些路径指向一个包含 add, remove, modify 或 conflict 的改变。</p><p>Git 找到出现在 base 中的一系列文件，receiver 或 giver indices。对每一个文件来说，Git 会比较 index entries 来决定应该对文件做出的改变。</p><p>第一个 entry 是为 <code>data/letter.txt</code> 的。base 中文件的内容是 <code>a</code>，receiver 中是 <code>b</code>，giver 中是 <code>a</code>。base 和 receiver 中的内容是不同的，但和 giver 中的内容是相同的。Git 知道内容被 receiver 修改了，而不是 giver。对于 <code>data/letter.txt</code> 来说 diff entry 是一个修改，而不是冲突。</p><p>diff 中的第二个 entry 是关于 <code>data/number.txt</code> 的。这个 case 下，base 和 receiver 的内容是相同的，giver 的内容是不同的。关于 <code>data/letter.txt</code> 的 diff entry 也是修改。</p><p>图属性：发现 merge commit 的 base 是可能的。这意味着如果 receiver 或 giver 中的一个文件从 base 改变了，Git 能自动解决这个文件的合并。这减少了使用者必行做的事情。</p><p>第五，diff 中的条目所指示的更改将应用于工作副本，<code>data/letter.txt</code> 的内容设置为 <code>b</code> 并且 <code>data/number.txt</code> 的内容设置为 <code>4</code>。</p><p>第六，diff 中的条目所指示的更改被应用到 index 上。<code>data/letter.txt</code> 的条目指向 <code>b</code> blob，<code>data/number.txt</code> 的条目指向 <code>4</code> blob。</p><p>第七，commit 之后更新的 index。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   59e2749 (HEAD -&gt; deputy) b4</span><br><span class="line">|\</span><br><span class="line">| * 310733e (master) a4</span><br><span class="line">* | cee5a72 b3</span><br><span class="line">|/</span><br><span class="line">* 2860e63 a3</span><br><span class="line">* 1a3d504 a2</span><br><span class="line">* dcee3eb a1</span><br><span class="line"></span><br><span class="line">➜  alpha git:(deputy) git cat-file -p 59e2</span><br><span class="line">tree 20294508aea3fb6f05fcc49adaecc2e6d60f7e7d</span><br><span class="line">parent cee5a721085281f3af73cf282106bfa0de9898ea</span><br><span class="line">parent 310733e3db6affdf9bcdef47a752acea61a7d481</span><br><span class="line">author smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1549016230 +0800</span><br><span class="line">committer smilingmiao &lt;miaoyongxiang@gmail.com&gt; 1549016230 +0800</span><br><span class="line"></span><br><span class="line">b4</span><br></pre></td></tr></table></figure><p>注意这个 commit 有两个父节点。</p><p>第八，Git 的 <code>HEAD</code> 指针指向当前分支（<code>deputy</code>），当前分支又指向新的 <code>b4</code> commit。</p><img src="/2019/01/31/translate-git-from-the-inside-out/18-b4-on-deputy.png" class=""><center><font size=2>从 `a4` 递归合并到 `b3` 的结果 `b4` merge commit</center></font><h3 id="合并两个（不同祖系却修改了同一个文件）的-commits"><a href="#合并两个（不同祖系却修改了同一个文件）的-commits" class="headerlink" title="合并两个（不同祖系却修改了同一个文件）的 commits"></a>合并两个（不同祖系却修改了同一个文件）的 commits</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">➜  alpha git:(master) git merge deputy</span><br><span class="line">Updating 310733e..59e2749</span><br><span class="line">Fast-forward</span><br><span class="line"> data/letter.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者切换到了 <code>master</code> 分支，并把 <code>deputy</code> 合并到 <code>master</code>。这将 <code>master</code> 快进到 <code>b4</code> commit。现在 <code>master</code> 和 <code>deputy</code> 指向相同的 commit。</p><img src="/2019/01/31/translate-git-from-the-inside-out/19-b4-master-deputy-on-b4.png" class=""><center><font size=2>`deputy` 合并到 `master` 并将 `master` 提到最新的 commit `b4`</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git checkout deputy</span><br><span class="line">Switched to branch &#x27;deputy&#x27;</span><br><span class="line">➜  alpha git:(deputy) printf &#x27;5&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(deputy) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(deputy) ✗ git commit -m &#x27;b5&#x27;</span><br><span class="line">[deputy 97339cf] b5</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者切换到 <code>deputy</code> 并将 <code>data/number.txt</code> 的内容设置为 <code>5</code> 然后将改变 commit 到 <code>deputy</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(deputy) git checkout master</span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">➜  alpha git:(master) printf &#x27;6&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;b6&#x27;</span><br><span class="line">[master 3e36c14] b6</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者切换到 <code>master</code> 并将 <code>data/number.txt</code> 的内容设置为 <code>6</code> 然后将改变 commit 到 <code>master</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/20-b5-on-deputy-b6-on-master.png" class=""><center><font size=2>`b5` commit 在 `deputy` 上，`b6` commit 在 `master` 上</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git merge deputy</span><br><span class="line">Auto-merging data/number.txt</span><br><span class="line">CONFLICT (content): Merge conflict in data/number.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>使用者合并 <code>deputy</code> 到 <code>master</code> 时候出现了一个冲突，于是合并中断了。处理一个冲突的合并与处理一个没有冲突的合并的前六步一样：设置 <code>.git/MERGE_HEAD</code>，找到 base commit，生成 base 的 indices，接收方和发送发 commits，创建一个 diff，更新工作副本和 indices。由于冲突，第七个 commit 步骤和第八个 ref update 步骤从未执行。让我们再次仔细检查步骤看看到底发生了什么。</p><p>第一，Git 将发送方的 commit 哈希值写入 <code>.git/MERGE_HEAD</code> 文件中。</p><img src="/2019/01/31/translate-git-from-the-inside-out/21-b6-on-master-with-merge-head.png" class=""><center><font size=2>合并 `b5` 到 `b6` 时写入 `MERGE_HEAD`</font></center><p>第二，Git 找到 base commit <code>b4</code>。</p><p>第三，Git 生成 base，接收方，发送发 commits 的 indices。</p><p>第四，Git 生成一个结合接收方 commit 和发送方 commit 改变的 diff。这个 diff 是一系列指向改变的文件路径：add，remove，modify，conflict。</p><p>在这个情况下，diff 只包含一个 entry：<code>data/number.txt</code>。Entry 被标记为一个冲突，因为在接收方，发送方，base 中 <code>data/number.txt</code> 的内容是不同的。</p><p>第五，在 diff 中被 entries 标示的改变应用到工作副本。对于冲突的地方，Git 同时写入工作副本中的文件。<code>data/number.txt</code> 的内容设置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">6</span><br><span class="line">=======</span><br><span class="line">5</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; deputy</span><br></pre></td></tr></table></figure><p>第六，在 diff 中被 entry 标示的改变应用到 index。在 index 中的 Entries 是第一无二的，它是结合文件路径和状态被认定的。未冲突的文件的 entry 状态为 <code>0</code>。这个合并前，index 看起来像这样，<code>0</code> 是状态值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data/letter.txt 0   63d8dbd40c23542e740659a7168a0ce3138ea748</span><br><span class="line">data/number.txt 0   62f9457511f879886bb7728c986fe10b0ece6bcb</span><br></pre></td></tr></table></figure><p>合并后 diff 写入 index，index 看起来是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">63d8dbd40c23542e740659a7168a0ce3138ea748 0   data/letter.txt</span><br><span class="line">bf0d87ab1b2b0ec1a11a3973d2845b42413d9767 1   data/number.txt</span><br><span class="line">62f9457511f879886bb7728c986fe10b0ece6bcb 2   data/number.txt</span><br><span class="line">7813681f5b41c028345ca62a2be376bae70b7f61 3   data/number.txt</span><br></pre></td></tr></table></figure><p><code>data/letter.txt</code> 的 entry 在状态 <code>0</code> 与它合并之前一样。entry 状态为 <code>0</code> 的 <code>data/number.txt</code> 不在了。有三个新的 entries 在它的位置。状态为 <code>1</code> 的 entry 有 base 的 <code>data/number.txt</code> 的内容的哈希值。状态为 <code>1</code> 的 entry 有 base 的 <code>data/number.txt</code> 的内容的哈希值。状态为 <code>2</code> 的 entry 有 receiver 的 <code>data/number.txt</code> 的内容的哈希值。状态为 <code>3</code> 的 entry 有 giver 的 <code>data/number.txt</code> 的内容的哈希值。目前这三个 entries 告诉 Git <code>data/numbert.txt</code> 有冲突。</p><p>合并暂停。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ printf &#x27;11&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br></pre></td></tr></table></figure><p>使用者通过设置 <code>data/number.txt</code> 的内容为 <code>11</code> 使两个冲突的文件内成为一体。他们添加文件到 index。Git 添加一个内容为 <code>11</code> 的 blob。添加一个冲突的文件告诉 Git 那个冲突解决了。Git 从 index ta移除了 entries 状态为 <code>1</code>，<code>2</code> 和 <code>3</code> 的 <code>data/number.txt</code>。它添加了一个 <code>data/number.txt</code> 的 entry 状态为 <code>0</code> 的新 blob 文件。index 现在：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git ls-files -s</span><br><span class="line">63d8dbd40c23542e740659a7168a0ce3138ea748 0  data/letter.txt</span><br><span class="line">9d607966b721abde8931ddd052181fae905db503 0  data/number.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;b11&#x27;</span><br><span class="line">[master 74c3c2e] b11</span><br></pre></td></tr></table></figure><p>第七，使用者 commit。Git 发现 <code>.git/MERGE_HEAD</code> 在仓库，它表示有一个合并正在进行。它检查了 index 然后发现这儿没有冲突。它创建了一个新的 commit <code>b11</code> 去记录解决了冲突的合并内容。它删除了在 <code>.git/MERGE_HEAD</code> 的文件。这完成了合并。</p><p>第八，Git 指向当前的分支 <code>master</code>，在新的 commit。</p><img src="/2019/01/31/translate-git-from-the-inside-out/22-b11-on-master.png" class=""><center><font size=2>`b11` 合并 commit 冲突的结果，递归合并 `b5` 到 `b6`</font></center><h3 id="移除一个文件"><a href="#移除一个文件" class="headerlink" title="移除一个文件"></a>移除一个文件</h3><p>这个 Git 示意图包括了 commit history，关于最近 commit 的 trees 和 blobs，以及工作副本和 index。</p><img src="/2019/01/31/translate-git-from-the-inside-out/23-b11-with-objects-wc-and-index.png" class=""><center><font size=2>工作副本，index，`b11` commit 和它的 tree graph</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git rm data/letter.txt</span><br><span class="line">rm &#x27;data/letter.txt&#x27;</span><br></pre></td></tr></table></figure><p>使用者告诉 Git 去移除 <code>data/letter.txt</code>。文件被从工作副本删除。entry 被从 index 删除。</p><img src="/2019/01/31/translate-git-from-the-inside-out/24-b11-letter-removed-from-wc-and-index.png" class=""><center><font size=2>`data/letter.txt` 被从工作副本和 index 移除后</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;11&#x27;</span><br><span class="line">[master f8f7cec] 11</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 data/letter.txt</span><br></pre></td></tr></table></figure><p>使用者 commits。作为一部分 commit，一如既往，Git 构建了一颗 tree graph 代表 index 的内容。<code>data/letter.txt</code> 不包括在 tree graph，因为它不在 index 中。</p><img src="/2019/01/31/translate-git-from-the-inside-out/25-11.png" class=""><center><font size=2>`11` commit made after `data/letter.txt` `rm`ed</font></center><h3 id="复制一个仓库"><a href="#复制一个仓库" class="headerlink" title="复制一个仓库"></a>复制一个仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cd ..</span><br><span class="line">➜  Git cp -R alpha bravo</span><br></pre></td></tr></table></figure><p>使用者复制 <code>alpha/</code> 仓库的内容复制到 <code>bravo./</code> 目录下。</p><p>这产生了下面的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── alpha</span><br><span class="line">│   └── data</span><br><span class="line">│       └── number.txt</span><br><span class="line">└── bravo</span><br><span class="line">    └── data</span><br><span class="line">        └── number.txt</span><br></pre></td></tr></table></figure><p>现在在 <code>bravo</code> 目录有另一个 Git graph</p><img src="/2019/01/31/translate-git-from-the-inside-out/26-11-cp-alpha-to-bravo.png" class=""><center><font size=2>New graph created when `alpha` `cp`ed to `bravo`</font></center><h3 id="链接一个仓库到另一个仓库"><a href="#链接一个仓库到另一个仓库" class="headerlink" title="链接一个仓库到另一个仓库"></a>链接一个仓库到另一个仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Git cd alpha</span><br><span class="line">➜  alpha git:(master) git remote add bravo ../bravo</span><br></pre></td></tr></table></figure><p>使用者移动回 <code>alpha</code> 仓库。他们设置 <code>bravo</code> 作为一个远程仓库 <code>alpha</code>。这添加几行内容到 <code>alpha/.git/config</code> 文件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;bravo&quot;]</span><br><span class="line">url = ../bravo</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/bravo/*</span><br></pre></td></tr></table></figure><p>这几行内容指定了在目录 <code>../bravo</code> 有一个叫做 <code>bravo</code> 的远程仓库。</p><h3 id="从远程取来一个分支"><a href="#从远程取来一个分支" class="headerlink" title="从远程取来一个分支"></a>从远程取来一个分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cd ../bravo</span><br><span class="line">➜  bravo git:(master) printf &#x27;12&#x27; &gt; data/number.txt</span><br><span class="line">➜  bravo git:(master) ✗ git add data/number.txt</span><br><span class="line">➜  bravo git:(master) ✗ git commit -m &#x27;12&#x27;</span><br><span class="line">[master 000f37d] 12</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者进入到 <code>bravo</code> 仓库。他们设置 <code>data/number.txt</code> 的内容为 <code>12</code> 并且在 <code>bravo</code> commit change 到 <code>master</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/27-12-bravo.png" class=""><center><font size=2>`12` commit on `bravo` repository</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">➜  bravo git:(master) cd ../alpha</span><br><span class="line">➜  alpha git:(master) git fetch bravo master</span><br><span class="line">remote: Enumerating objects: 7, done.</span><br><span class="line">remote: Counting objects: 100% (7/7), done.</span><br><span class="line">remote: Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (4/4), done.</span><br><span class="line">From ../bravo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line"> * [new branch]      master     -&gt; bravo/master</span><br></pre></td></tr></table></figure><p>使用者进入 <code>alpha</code> 仓库。它们拉取 <code>master</code> 从 <code>bravo</code> 到 <code>alpha</code>。这个处理有四个步骤。</p><p>第一，Git 得到在 <code>bravo</code> master 指向的 commit 的哈希值，这是 commit <code>12</code> 的哈希。</p><p>第二，Git 制造了 commit <code>12</code> 依赖的一系列 objects：commit object，在 tree graph 中的 objects，commit <code>12</code> 的祖先 commits 以及在他们的 tree graphs 中的 objects。它从这个列表移除了 <code>alpha</code> object 数据库已有的所有 objects。它拷贝剩余的到 <code>alpha/.git/objects/</code>。</p><p>第三，在 <code>alpha/.git/refs/remotes/bravo/master</code> 的实体引用文件内容设置到 <code>12</code> commit 的哈希。</p><p>第四，<code>alpha/.git/FETCH_HEAD</code> 的内容设置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">000f37d3b87a64e97b5de86aec5c54d8257638dd    branch &#x27;master&#x27; of ../bravo</span><br></pre></td></tr></table></figure><p>这标示最近的 fetch 命令从 <code>bravo</code> 拉取了 <code>12</code> commit 的 <code>master</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/28-12-fetched-to-alpha.png" class=""><center><font size=2>`alpha` after `bravo/master` fetched</font></center><p><strong>图属性</strong>：objects 可以被拷贝。这意味着那些 history 可以在仓库直接被分享。</p><p><strong>图属性</strong>：一个仓库可以存储远程分支引用，比如：<code>alpha/.git/refs/remotes/bravo/master</code>。这意味着那个仓库能在本地记录远程仓库分支的状态。它在获取时是正确的，但是如果远程分支发生变化，它将过时。</p><h3 id="Merge-FETCH-HEAD"><a href="#Merge-FETCH-HEAD" class="headerlink" title="Merge FETCH_HEAD"></a>Merge FETCH_HEAD</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git merge FETCH_HEAD</span><br><span class="line">Updating f8f7cec..000f37d</span><br><span class="line">Fast-forward</span><br><span class="line"> data/number.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者合并 <code>FETCH_HEAD</code>。<code>FETCH_HEAD</code> 仅仅是另一个引用。它解决了 commit <code>12</code>，发送方。<code>HEAD</code> 指向了 commit <code>11</code>，接收方。Git 做了一次快行合并然后 <code>master</code> 指向了 commit <code>12</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/29-12-merged-to-alpha.png" class=""><center><font size=2>`alpha` after `FETCH_HEAD` merged</font></center><h3 id="从远程拉取一个分支"><a href="#从远程拉取一个分支" class="headerlink" title="从远程拉取一个分支"></a>从远程拉取一个分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git pull bravo master</span><br><span class="line">From ../bravo</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">Already up to date.</span><br></pre></td></tr></table></figure><p>使用者从 <code>bravo</code> 拉取 <code>master</code> 到 <code>alpha</code>。Pull 是 “fetch and merge FETCH_HEAD” 的缩写。Git 执行这两个命令并报告 <code>master</code> 已经是最新的。</p><h3 id="克隆一个仓库"><a href="#克隆一个仓库" class="headerlink" title="克隆一个仓库"></a>克隆一个仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) cd ..</span><br><span class="line">➜  Git git clone alpha charlie</span><br><span class="line">Cloning into &#x27;charlie&#x27;...</span><br><span class="line">done.</span><br></pre></td></tr></table></figure><p>使用者移动到上面的目录中。他们把 alpha 克隆给 charlie。复制到 charlie 的结果与使用者生成 bravo 存储库的 cp 类似。Git 创建了一个名为 charlie 的新目录。它将 charlie 作为 Git repo 输入，将 alpha 作为一个名为 origin 的远程添加，获取 origin 并合并 FETCH_HEAD。</p><h3 id="将分支推送到远程上的签出分支"><a href="#将分支推送到远程上的签出分支" class="headerlink" title="将分支推送到远程上的签出分支"></a>将分支推送到远程上的签出分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  Git cd alpha</span><br><span class="line">➜  alpha git:(master) printf &#x27;13&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;13&#x27;</span><br><span class="line">[master d5cd098] 13</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用者返回 alpha 存储库。他们设置数据&#x2F;数字的内容。将 txt 设置为 13，并将更改提交给 alpha 上的 master。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git remote add charlie ../charlie</span><br></pre></td></tr></table></figure><p>他们将 charlie 设置为 alpha 上的远程存储库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git push charlie master</span><br><span class="line">Enumerating objects: 7, done.</span><br><span class="line">Counting objects: 100% (7/7), done.</span><br><span class="line">Writing objects: 100% (4/4), 282 bytes | 282.00 KiB/s, done.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: error: refusing to update checked out branch: refs/heads/master</span><br><span class="line">remote: error: By default, updating the current branch in a non-bare repository</span><br><span class="line">remote: is denied, because it will make the index and work tree inconsistent</span><br><span class="line">remote: with what you pushed, and will require &#x27;git reset --hard&#x27; to match</span><br><span class="line">remote: the work tree to HEAD.</span><br><span class="line">remote:</span><br><span class="line">remote: You can set the &#x27;receive.denyCurrentBranch&#x27; configuration variable</span><br><span class="line">remote: to &#x27;ignore&#x27; or &#x27;warn&#x27; in the remote repository to allow pushing into</span><br><span class="line">remote: its current branch; however, this is not recommended unless you</span><br><span class="line">remote: arranged to update its work tree to match what you pushed in some</span><br><span class="line">remote: other way.</span><br><span class="line">remote:</span><br><span class="line">remote: To squelch this message and still keep the default behaviour, set</span><br><span class="line">remote: &#x27;receive.denyCurrentBranch&#x27; configuration variable to &#x27;refuse&#x27;.</span><br><span class="line">To ../charlie</span><br><span class="line"> ! [remote rejected] master -&gt; master (branch is currently checked out)</span><br><span class="line">error: failed to push some refs to &#x27;../charlie&#x27;</span><br></pre></td></tr></table></figure><p>他们把 <code>master</code> 推送到 charlie。</p><p>commit <code>13</code> 所需的所有对象都复制到 charlie。</p><p>此时，push 过程停止。Git 一如既往地告诉用户哪里出错了。它拒绝推送到远程签出的分支。这是有意义的。推送将更新远程索引和头部。如果有人在远程编辑工作副本，这将导致混淆。</p><p>此时，用户可以创建一个新分支，将 commit <code>13</code> 合并到其中，并将该分支推给 charlie。但是，实际上，他们想要一个可以随时推送的存储库。他们想要一个可以推入和拉出的中央存储库，但是没有人直接提交。他们想要一个 GitHub 遥控器。他们想要一个裸存储库。</p><h3 id="克隆一个裸仓库"><a href="#克隆一个裸仓库" class="headerlink" title="克隆一个裸仓库"></a>克隆一个裸仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  Git git clone alpha delta --bare</span><br><span class="line">Cloning into bare repository &#x27;delta&#x27;...</span><br><span class="line">done.</span><br></pre></td></tr></table></figure><p>使用者移动到上述的目录。他们克隆 <code>delta</code> 作为一个裸仓库。这是一个普通的克隆，有两个不同之处。<code>config</code> 文件标示仓库是裸的。然后文件是普通的存储在 <code>.git</code> 目录是存储在仓库的根目录的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">delta</span><br><span class="line">    ├── HEAD</span><br><span class="line">    ├── branches</span><br><span class="line">    ├── config</span><br><span class="line">    ├── description</span><br><span class="line">    ├── hooks</span><br><span class="line">    ├── info</span><br><span class="line">    ├── objects</span><br><span class="line">    ├── packed-refs</span><br><span class="line">    └── refs</span><br></pre></td></tr></table></figure><img src="/2019/01/31/translate-git-from-the-inside-out/30-13-alpha-cloned-to-delta-bare.png" class=""><center><font size=2>`alpha` and `delta` graphs after `alpha` cloned to `delta`</font></center><h3 id="推送一个分支到裸仓库"><a href="#推送一个分支到裸仓库" class="headerlink" title="推送一个分支到裸仓库"></a>推送一个分支到裸仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  Git cd alpha</span><br><span class="line">➜  alpha git:(master) git remote add delta ../delta</span><br></pre></td></tr></table></figure><p>使用者回到 <code>alpha</code> 仓库。他们在 <code>alpha</code> 上设置 <code>delta</code> 作为一个远程仓库。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) printf &#x27;14&#x27; &gt; data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git add data/number.txt</span><br><span class="line">➜  alpha git:(master) ✗ git commit -m &#x27;14&#x27;</span><br><span class="line">[master 4aeb92b] 14</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>它们设置 <code>data/number.txt</code> 的内容为 <code>14</code> 然后 commit change 到 <code>alpha</code> 上的 <code>master</code>。</p><img src="/2019/01/31/translate-git-from-the-inside-out/31-14-alpha.png" class=""><center><font size=2>`14` commit on `alpha`</font></center><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  alpha git:(master) git push delta master</span><br><span class="line">Enumerating objects: 7, done.</span><br><span class="line">Counting objects: 100% (7/7), done.</span><br><span class="line">Writing objects: 100% (4/4), 282 bytes | 282.00 KiB/s, done.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To ../delta</span><br><span class="line">   d5cd098..4aeb92b  master -&gt; master</span><br></pre></td></tr></table></figure><p>它们推送 <code>master</code> 到 <code>delta</code>。推送有三个步骤。</p><p>第一，所有在 <code>master</code> 分支上 commit <code>14</code> 所必需的 objects 被从 <code>alpha/.git/objects</code> 拷贝到 <code>delta/objects/</code>。</p><p>第二，<code>delta/refs/heads/master</code> 更新指向了 commit <code>14</code>。</p><p>第三，<code>alpha/.git/refs/remotes/delta/master</code> 设置并指向 commit <code>14</code>。<code>alpha</code> 有 <code>delta</code> 状态的最新记录。</p><img src="/2019/01/31/translate-git-from-the-inside-out/32-14-pushed-to-delta.png" class=""><center><font size=2>`14` commit pushed from `alpha` to `delta`</font></center><p>– EOF –</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://maryrosecook.com/blog/post/git-from-the-inside-out">https://maryrosecook.com/blog/post/git-from-the-inside-out</a><br><a href="http://gitbook.liuhui998.com/8_2.html">http://gitbook.liuhui998.com/8_2.html</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意：此文是对 &lt;a href=&quot;https://maryrosecook.com/blog/post/git-from-the-inside-out&quot;&gt;Git from the inside out&lt;/a&gt; 的翻译，个别地方添加了自己的实践结果，仅作理解学习之用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这篇文章将解释 Git 是如何工作的。相同的内容也可以在这个 &lt;a href=&quot;https://www.youtube.com/watch?v=fCtZWGhQBvo&quot;&gt;视频&lt;/a&gt; 中看到。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://github.com/smilingmiao/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>部分常见算法的思路</title>
    <link href="https://github.com/smilingmiao/2018/12/25/thought-of-algorithm/"/>
    <id>https://github.com/smilingmiao/2018/12/25/thought-of-algorithm/</id>
    <published>2018-12-24T16:00:00.000Z</published>
    <updated>2020-05-17T16:19:53.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>特点：简单粗暴，上来直接比。两层<code>for</code>循环嵌套，外层共执行<code>n</code>次，内层随外层执行的次数逐渐递减，总次数就是<code>n</code>平方数量级，因此时间复杂度是 O(n2)，空间复杂度 O(1)。</p><span id="more"></span><p>步骤：</p><ol><li>取到外层循环当前的元素 Ei &#x3D; array[i]</li><li>内层从 i+1 开始递增遍历所有元素与 Ei 比较并交换</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">    <span class="keyword">var</span> temp <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> array.count &#123;</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="operator">+</span> <span class="number">1</span> <span class="operator">..&lt;</span> array.count &#123;</span><br><span class="line">            <span class="keyword">if</span> array[i] <span class="operator">&gt;</span> array[j] &#123;</span><br><span class="line">                temp <span class="operator">=</span> array[i]</span><br><span class="line">                array[i] <span class="operator">=</span> array[j]</span><br><span class="line">                array[j] <span class="operator">=</span> temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>特点：也比较简单直接，两层<code>for</code>循环嵌套，内层遍历数组内剩余元素并找出最小的，并装进另外一个数组中，同时从原来的数组中移除。时间复杂度也是 O(n2)，空间复杂度 O(n)。</p><p>步骤：</p><ol><li>每次取得最小的元素，装进另外一个数组，从原来的数组移除，最后另外一个数组按下标取就是排好序的。</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">selectionSort</span>(<span class="params">unsorted</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> sortedArray <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line">        <span class="keyword">let</span> count <span class="operator">=</span> array.count</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> count <span class="operator">-</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> (index, min) <span class="operator">=</span> (<span class="number">0</span>, array[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span> <span class="operator">...</span> count <span class="operator">-</span> i &#123;</span><br><span class="line">                <span class="keyword">if</span> array[j] <span class="operator">&gt;=</span> min &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                (index, min) <span class="operator">=</span> (j, array[j])</span><br><span class="line">            &#125;</span><br><span class="line">            array.remove(at: index)</span><br><span class="line">            sortedArray.append(min)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        array <span class="operator">=</span> sortedArray</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>特点：遍历取每一个元素并和前一个元素比较，如果需要交换则执行交换，并且递归调用交换方法检查前面的元素是否需要交换。最坏的情况是，一个降序的数组要排列升序的，这时候时间复杂度就是 O(n2)，空间复杂度是 O(1)。</p><p>步骤：</p><ol><li>遍历每次取得当前元素和前一个比</li><li>需要交换就交换，并且递归遍历交换前面需要交换的元素</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> previous <span class="operator">=</span> array[<span class="number">0</span>], array <span class="operator">=</span> array</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..&lt;</span> array.count &#123;</span><br><span class="line">            <span class="keyword">if</span> array[i] <span class="operator">&lt;</span> previous &#123;</span><br><span class="line">                <span class="built_in">swap</span>(<span class="operator">&amp;</span>array, i <span class="operator">-</span> <span class="number">1</span>, i)</span><br><span class="line">            &#125;</span><br><span class="line">            previous <span class="operator">=</span> array[i]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// [4, 3, 2, 1]</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swap</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">left</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">right</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> left <span class="operator">=</span> left, right <span class="operator">=</span> right, temp <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> array[left] <span class="operator">&gt;</span> array[right]  &#123;</span><br><span class="line">            temp <span class="operator">=</span> array[left]</span><br><span class="line">            array[left] <span class="operator">=</span> array[right]</span><br><span class="line">            array[right] <span class="operator">=</span> temp</span><br><span class="line">            left <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            right <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>特点：分而治之。选定第一个元素为基准值 P，头指针 L 指向第二个元素，尾指针 R 指向最后一个元素，只要 L &lt;&#x3D; R 的情况下，递归遍历找出 L 指向大于 P 的值，R 指向小于 P 的值并进行交换，这就把 P 当成一个分水岭，P 左边的是小于 P 的，右边的是大于 P 的（升序情况下）。最后再把每一部分拆成更小的两部分进行处理。</p><p>步骤：</p><ol><li>选定基准值 Pivot</li><li>后行指针和前行指针同时移动</li><li>分别找出大于基准值的和小于基准值的并交换</li><li>将交换基准值左右两边的元素拆分为更小子问题递归解决</li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">quickSort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">low</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">high</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> low <span class="operator">&lt;</span> high <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pivot <span class="operator">=</span> array[low]</span><br><span class="line">        <span class="keyword">var</span> <span class="type">L</span> <span class="operator">=</span> low <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> <span class="type">R</span> <span class="operator">=</span> high</span><br><span class="line">        <span class="keyword">var</span> temp <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="type">L</span> <span class="operator">&lt;=</span> <span class="type">R</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> <span class="type">L</span> <span class="operator">&lt;=</span> high <span class="operator">&amp;&amp;</span> array[<span class="type">L</span>] <span class="operator">&lt;</span> pivot &#123;</span><br><span class="line">                <span class="type">L</span> <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> <span class="type">L</span> <span class="operator">&lt;=</span> <span class="type">R</span> <span class="operator">&amp;&amp;</span> array[<span class="type">R</span>] <span class="operator">&gt;=</span> pivot &#123;</span><br><span class="line">                <span class="type">R</span> <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="type">L</span> <span class="operator">&gt;</span> <span class="type">R</span> &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            temp <span class="operator">=</span> array[<span class="type">L</span>]</span><br><span class="line">            array[<span class="type">L</span>] <span class="operator">=</span> array[<span class="type">R</span>]</span><br><span class="line">            array[<span class="type">R</span>] <span class="operator">=</span> temp</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/// 执行到这里时因为 L &gt; R 了，此时 R 一定小于 Pivot</span></span><br><span class="line">        temp <span class="operator">=</span> array[<span class="type">R</span>]</span><br><span class="line">        array[<span class="type">R</span>] <span class="operator">=</span> array[low]</span><br><span class="line">        array[low] <span class="operator">=</span> temp</span><br><span class="line">        </span><br><span class="line">        quickSort(<span class="operator">&amp;</span>array, low, <span class="type">R</span> <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">        quickSort(<span class="operator">&amp;</span>array, <span class="type">R</span> <span class="operator">+</span> <span class="number">1</span>, high)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>特点：分而治之。不停地将一组数据分为两份数据，再将两份数据分为四份，再分为八份…直到分为不能再分开的最小单位，然后再逆向地不断将两部分排序并合并使之有序，直到整个数组里的数据都成为有序的。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">mergeSort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> helper <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: array.count), array <span class="operator">=</span> array</span><br><span class="line">        mergeSort(<span class="operator">&amp;</span>array, <span class="operator">&amp;</span>helper, <span class="number">0</span>, array.count <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">mergeSort</span>(<span class="keyword">_</span> <span class="params">original</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">helper</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">low</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">high</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">guard</span> low <span class="operator">&lt;</span> high <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> mid <span class="operator">=</span> low <span class="operator">+</span> (high <span class="operator">-</span> low) <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        mergeSort(<span class="operator">&amp;</span>original, <span class="operator">&amp;</span>helper, low, mid)</span><br><span class="line">        mergeSort(<span class="operator">&amp;</span>original, <span class="operator">&amp;</span>helper, mid <span class="operator">+</span> <span class="number">1</span>, high)</span><br><span class="line">        merge(<span class="operator">&amp;</span>original, <span class="operator">&amp;</span>helper, low, mid, high)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">merge</span>(<span class="keyword">_</span> <span class="params">original</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">helper</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">low</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">mid</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">high</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> low <span class="operator">...</span> high &#123;</span><br><span class="line">            helper[i] <span class="operator">=</span> original[i]</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> helperLeft <span class="operator">=</span> low, helperRight <span class="operator">=</span> mid <span class="operator">+</span> <span class="number">1</span>, current <span class="operator">=</span> low</span><br><span class="line">        <span class="keyword">while</span> helperLeft <span class="operator">&lt;=</span> mid <span class="operator">&amp;&amp;</span> helperRight <span class="operator">&lt;=</span> high &#123;</span><br><span class="line">            <span class="keyword">if</span> helper[helperLeft] <span class="operator">&lt;</span> helper[helperRight] &#123;</span><br><span class="line">                original[current] <span class="operator">=</span> helper[helperLeft]</span><br><span class="line">                helperLeft <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                original[current] <span class="operator">=</span> helper[helperRight]</span><br><span class="line">                helperRight <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            current <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">guard</span> helperLeft <span class="operator">&lt;=</span> mid <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">...</span> mid <span class="operator">-</span> helperLeft &#123;</span><br><span class="line">            original[current <span class="operator">+</span> i] <span class="operator">=</span> helper[helperLeft <span class="operator">+</span> i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>特点：分而治之。</p><p>步骤：找到最小值<code>min</code>和最大值<code>max</code>；确定桶的数量；计算出步长；遍历数组并计算将元素插入到不用序号的桶中；根据桶序号从小到大遍历取出元素并装进新的数组。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">bucketSort</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> array <span class="operator">=</span> array, min <span class="operator">=</span> array[<span class="number">0</span>], max <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> array &#123;</span><br><span class="line">            <span class="keyword">if</span> element <span class="operator">&lt;</span> min &#123;</span><br><span class="line">                min <span class="operator">=</span> element</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> element <span class="operator">&gt;</span> max &#123;</span><br><span class="line">                max <span class="operator">=</span> element</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> max <span class="operator">==</span> min &#123; <span class="comment">// 最大值和最小值一样，说明数组中元素值都相同，不需要排序</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 规定需要桶的数量为 10</span></span><br><span class="line">        <span class="keyword">let</span> bucketSize <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">// 计算步长，即每个桶里容纳的数值范围</span></span><br><span class="line">        <span class="keyword">let</span> stride <span class="operator">=</span> (max <span class="operator">-</span> min) <span class="operator">/</span> bucketSize <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">// 创建一个二位数组，包含 10 个空桶</span></span><br><span class="line">        <span class="keyword">var</span> buckets: [[<span class="type">Int</span>]] <span class="operator">=</span> <span class="type">Array</span>(repeating: [], count: bucketSize)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> element <span class="keyword">in</span> array &#123;</span><br><span class="line">            <span class="keyword">let</span> pos <span class="operator">=</span> element <span class="operator">/</span> stride</span><br><span class="line">            insert(<span class="operator">&amp;</span>buckets[pos], element)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        array.removeAll()</span><br><span class="line">        <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets &#123;</span><br><span class="line">            <span class="keyword">if</span> bucket.isEmpty &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> bucket &#123;</span><br><span class="line">                array.append(num)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(array)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">insert</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">val</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        array.append(val)</span><br><span class="line">        <span class="keyword">if</span> array.count <span class="operator">==</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span> <span class="operator">..&lt;</span> array.count).reversed() &#123;</span><br><span class="line">            <span class="keyword">if</span> i <span class="operator">==</span> <span class="number">0</span> <span class="operator">||</span> array[i] <span class="operator">&gt;=</span> array[i <span class="operator">-</span> <span class="number">1</span>] &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> temp <span class="operator">=</span> array[i]</span><br><span class="line">                array[i] <span class="operator">=</span> array[i <span class="operator">-</span> <span class="number">1</span>]</span><br><span class="line">                array[i <span class="operator">-</span> <span class="number">1</span>] <span class="operator">=</span> temp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h1><p>特点：分而治之。秉承了桶排序的一些思路。</p><p>步骤：取出最小<code>min</code>和最大<code>max</code>值；计算出最小最大的差值并加1（作为容纳不同元素的个数的数组容量值）；把装元素的个数按照斐波那契数列数列的方式计算后放到数组；逐个从原数组中取出元素放到新数组。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">countingSort</span>(<span class="params">unsorted</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> (min, max) <span class="operator">=</span> (array[<span class="number">0</span>], array[<span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> array &#123;</span><br><span class="line">            <span class="keyword">if</span> e <span class="operator">&lt;</span> min &#123;</span><br><span class="line">                min <span class="operator">=</span> e</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> e <span class="operator">&gt;</span> max &#123;</span><br><span class="line">                max <span class="operator">=</span> e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> k <span class="operator">=</span> max <span class="operator">-</span> min <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="comment">// counting array</span></span><br><span class="line">        <span class="keyword">var</span> c <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: k)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> array.count &#123;</span><br><span class="line">            c[array[i] <span class="operator">-</span> min] <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="operator">..&lt;</span> c.count &#123;</span><br><span class="line">            c[i] <span class="operator">=</span> c[i] <span class="operator">+</span> c[i <span class="operator">-</span> <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> result <span class="operator">=</span> <span class="type">Array</span>(repeating: <span class="number">0</span>, count: array.count)</span><br><span class="line">        <span class="keyword">var</span> lastIndex: <span class="type">Int</span>?</span><br><span class="line">        <span class="keyword">var</span> currentIndex: <span class="type">Int</span>?</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span> <span class="operator">..&lt;</span> array.count).reversed() &#123;</span><br><span class="line">            currentIndex <span class="operator">=</span> c[array[i] <span class="operator">-</span> min] <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> lastIndex <span class="operator">!=</span> <span class="literal">nil</span> <span class="operator">&amp;&amp;</span> lastIndex <span class="operator">==</span> currentIndex &#123;</span><br><span class="line">                result[currentIndex<span class="operator">!</span> <span class="operator">-</span> <span class="number">1</span>] <span class="operator">=</span> array[i]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result[currentIndex<span class="operator">!</span>] <span class="operator">=</span> array[i]</span><br><span class="line">            &#125;</span><br><span class="line">            lastIndex <span class="operator">=</span> currentIndex<span class="operator">!</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">radixSort</span>(<span class="params">unsorted</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> length <span class="operator">=</span> maxLength(array)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 待排序数组中的元素如果全是正整数的情况只需要 0到9 十个基数桶就行，</span></span><br><span class="line">        <span class="comment">// 但现实情况往往需要考虑边界情况，也就是同时存在正负数的情况，此时就</span></span><br><span class="line">        <span class="comment">// 需要额外的 -9到-1 九个桶，所以总共需要 19 个桶</span></span><br><span class="line">        <span class="keyword">let</span> count <span class="operator">=</span> <span class="number">19</span>, indexer <span class="operator">=</span> <span class="number">9</span></span><br><span class="line">        <span class="keyword">var</span> mode <span class="operator">=</span> <span class="number">10</span>, divisor <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> lastSorted <span class="operator">=</span> array</span><br><span class="line">        <span class="keyword">var</span> buckets <span class="operator">=</span> <span class="type">Array</span>(repeating: [], count: count)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> length <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> e <span class="keyword">in</span> lastSorted &#123;</span><br><span class="line">                <span class="comment">// +indexer 是为了保证下标不为负数</span></span><br><span class="line">                buckets[e <span class="operator">%</span> mode <span class="operator">/</span> divisor <span class="operator">+</span> indexer].append(e)</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            lastSorted.removeAll()</span><br><span class="line">            <span class="keyword">for</span> bucket <span class="keyword">in</span> buckets &#123;</span><br><span class="line">                <span class="keyword">if</span> bucket.isEmpty &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> bucket &#123;</span><br><span class="line">                    lastSorted.append(e <span class="keyword">as!</span> <span class="type">Int</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            mode <span class="operator">*=</span> <span class="number">10</span></span><br><span class="line">            divisor <span class="operator">*=</span> <span class="number">10</span></span><br><span class="line">            length <span class="operator">-=</span> <span class="number">1</span></span><br><span class="line">            buckets.removeAll()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(lastSorted)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">maxLength</span>(<span class="keyword">_</span> <span class="params">array</span>: [<span class="type">Int</span>]) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 取最大值</span></span><br><span class="line">        <span class="keyword">var</span> max <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> array &#123;</span><br><span class="line">            <span class="keyword">if</span> e <span class="operator">&gt;</span> max &#123;</span><br><span class="line">                max <span class="operator">=</span> e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最大值位数</span></span><br><span class="line">        <span class="keyword">var</span> positiveMaxLength <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> max <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">            positiveMaxLength <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            max <span class="operator">=</span> max <span class="operator">/</span> <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 取最小值</span></span><br><span class="line">        <span class="keyword">var</span> min <span class="operator">=</span> array[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> array &#123;</span><br><span class="line">            <span class="keyword">if</span> e <span class="operator">&lt;</span> min &#123;</span><br><span class="line">                min <span class="operator">=</span> e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最小值位数</span></span><br><span class="line">        <span class="keyword">var</span> negativeMaxLength <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> min <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">            negativeMaxLength <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            min <span class="operator">=</span> min <span class="operator">*</span> <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> positiveMaxLength <span class="operator">&gt;</span> negativeMaxLength <span class="operator">?</span> positiveMaxLength : negativeMaxLength</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">shellSort</span>(<span class="params">unsorted</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> gap <span class="operator">=</span> array.count <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> gap <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> <span class="operator">..&lt;</span> array.count &#123;</span><br><span class="line">                <span class="keyword">if</span> i <span class="operator">+</span> gap <span class="operator">&gt;=</span> array.count &#123;</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> array[i] <span class="operator">&lt;</span> array[i <span class="operator">+</span> gap] &#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">swap</span>(<span class="operator">&amp;</span>array, i, i <span class="operator">+</span> gap, gap)</span><br><span class="line">            &#125;</span><br><span class="line">            gap <span class="operator">/=</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(array)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swap</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">start</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">end</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">gap</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp <span class="operator">=</span> array[start]</span><br><span class="line">        array[start] <span class="operator">=</span> array[end]</span><br><span class="line">        array[end] <span class="operator">=</span> temp</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> gap <span class="operator">==</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span> start <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> array[start <span class="operator">-</span> <span class="number">1</span>] <span class="operator">&gt;</span> array[start] &#123;</span><br><span class="line">                <span class="built_in">swap</span>(<span class="operator">&amp;</span>array, start <span class="operator">-</span> <span class="number">1</span>, start, gap)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">heapSort</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) -&gt; [<span class="type">Int</span>] &#123;</span><br><span class="line">        <span class="keyword">guard</span> array.count <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> array</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> array <span class="operator">=</span> array</span><br><span class="line">        build_max_heap(<span class="operator">&amp;</span>array)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span> <span class="operator">...</span> array.count <span class="operator">-</span> <span class="number">1</span>).reversed() &#123;</span><br><span class="line">            <span class="built_in">swap</span>(<span class="operator">&amp;</span>array, <span class="number">0</span>, i)</span><br><span class="line">            heapify(<span class="operator">&amp;</span>array, <span class="number">0</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 建大顶堆</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">build_max_heap</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>]) &#123;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">0</span> <span class="operator">...</span> array.count <span class="operator">/</span> <span class="number">2</span> <span class="operator">-</span> <span class="number">1</span>).reversed() &#123;</span><br><span class="line">            heapify(<span class="operator">&amp;</span>array, i, array.count)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">heapify</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">index</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">len</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> dad <span class="operator">=</span> index</span><br><span class="line">        <span class="keyword">var</span> son <span class="operator">=</span> index <span class="operator">*</span> <span class="number">2</span> <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> son <span class="operator">&lt;</span> len &#123;</span><br><span class="line">            <span class="keyword">if</span> son <span class="operator">+</span> <span class="number">1</span> <span class="operator">&lt;</span> len <span class="operator">&amp;&amp;</span> array[son <span class="operator">+</span> <span class="number">1</span>] <span class="operator">&gt;</span> array[son] &#123;</span><br><span class="line">                son <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> array[dad] <span class="operator">&gt;</span> array[son] &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">swap</span>(<span class="operator">&amp;</span>array, dad, son)</span><br><span class="line">                dad <span class="operator">=</span> son</span><br><span class="line">                son <span class="operator">=</span> dad <span class="operator">*</span> <span class="number">2</span> <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swap</span>(<span class="keyword">_</span> <span class="params">array</span>: <span class="keyword">inout</span> [<span class="type">Int</span>], <span class="keyword">_</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp <span class="operator">=</span> array[a]</span><br><span class="line">        array[a] <span class="operator">=</span> array[b]</span><br><span class="line">        array[b] <span class="operator">=</span> temp</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>– EOF –</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.youtube.com/channel/UCaqGoweuUdGFGEJA3fl6slg">https://www.youtube.com/channel/UCaqGoweuUdGFGEJA3fl6slg</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;p&gt;特点：简单粗暴，上来直接比。两层&lt;code&gt;for&lt;/code&gt;循环嵌套，外层共执行&lt;code&gt;n&lt;/code&gt;次，内层随外层执行的次数逐渐递减，总次数就是&lt;code&gt;n&lt;/code&gt;平方数量级，因此时间复杂度是 O(n2)，空间复杂度 O(1)。&lt;/p&gt;</summary>
    
    
    
    
    <category term="算法" scheme="https://github.com/smilingmiao/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>关于哈希函数</title>
    <link href="https://github.com/smilingmiao/2018/12/21/about-hash/"/>
    <id>https://github.com/smilingmiao/2018/12/21/about-hash/</id>
    <published>2018-12-20T16:00:00.000Z</published>
    <updated>2020-05-17T16:19:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h1><p><strong>哈希函数</strong>（Hash function）又叫散列算法，它在广泛应用在计算机程序中，是我们需要掌握的基础知识。可以把<strong>哈希函数</strong>看成是一个黑盒，它接收一个输入，然后通过算法对输入进行处理后输出一个结果。具体算法有好有坏，但初衷都是要将数据压缩成较短的固定长度的数据摘要，并且希望任何不同输入都有不同的输出。</p><span id="more"></span><p>维基百科是这样说的：</p><blockquote><p><strong>散列函数</strong>（英语：Hash function）又称<strong>散列算法</strong>、<strong>哈希函数</strong>，是一种从任何一种数据中创建小的数字“指纹”的方法。散列函数把消息或数据压缩成摘要，使得数据量变小，将数据的格式固定下来。该<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>将数据打乱混合，重新创建一个叫做<strong>散列值</strong>（hash values，hash codes，hash sums，或hashes）的指纹。散列值通常用一个短的随机字母和数字组成的字符串来代表。好的散列函数在输入域中很少出现<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%A3%E5%88%97%E5%86%B2%E7%AA%81&action=edit&redlink=1">散列冲突</a>。在<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E8%A1%A8">散列表</a>和<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86&action=edit&redlink=1">数据处理</a>中，不抑制冲突来区别数据，会使得<a href="https://zh.wikipedia.org/w/index.php?title=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%B0%E5%BD%95&action=edit&redlink=1">数据库记录</a>更难找到。</p></blockquote><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p><strong>哈希表</strong>也叫<strong>散列表</strong>，是根据键（Key）而直接访问在内存存储的数据结构。它通过一个键值的函数，将所需查询的数据映射到表中的一个位置来访问记录，这加快了查找速度。这个映射函数称做散列函数，存放记录的数组称做散列表。</p><p>微信通讯录按照微信名的首字母从 <strong>A</strong> 到 <strong>Z</strong> 划分成不同的组，其它字符则全归在 <strong>#</strong> 组。这样张三（<strong>z</strong>hangsan）和李四（<strong>l</strong>isi）就分别被映射了 <strong>Z</strong> 组里和 <strong>L</strong> 组里。这种取微信名的首字母作为 key 进行映射的方式就算是哈希函数映射的一个模型。但这样会出现一个问题，张三和张四都会被取 Z 作为 key 进行映射，并且会被映射到同一个地方，这就是发生了哈希碰撞（collision）。防止哈希碰撞最有效的方法是扩大哈希的取值空间，也就是值域。通常解决哈希碰撞的方法是使用开放定址法和单独链表法或是再散列进行处理。</p><h1 id="iOS-中的哈希函数"><a href="#iOS-中的哈希函数" class="headerlink" title="iOS 中的哈希函数"></a>iOS 中的哈希函数</h1><p>NSSet 和与之相似的 NSHashTable，以及 NSDictionary 和与之相似 NSMapTable 都有对哈希函数的使用，因而一般来说对这些集合进行读、写、查元素的时间复杂度都是 O(1)。因此这些集合类都有一个特点就是不能保存重复的元素。NSArray 和其对应的 mutable 版本进行、改、查原色就需要整体遍历来操作，因而时间复杂度 O(n)。</p><p>定义一个 Object 类，有<code>name</code>和<code>gender</code>属性，重写<code>hash</code>方法。</p><p>简单测试一下：在<code>hash</code>方法打上断点，运行项目，并没有语句流被断住。</p><img src="/2018/12/21/about-hash/code.png" class=""><p>点击一下 click Action 后出现下面图的情况，证明 NSSet 会调用<code>hash</code>算法，而 NSArray 并不会。</p><img src="/2018/12/21/about-hash/hash_function.png" class=""><p>写文章实在不容易，真的佩服坚持写博客的博主。知道和表达出来真的完全是两码事儿。</p><p>– EOF –</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8">https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B8</a></p><p><a href="https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8">https://zh.wikipedia.org/wiki/%E5%93%88%E5%B8%8C%E8%A1%A8</a></p><p><a href="https://bestswifter.com/hashtable/">https://bestswifter.com/hashtable/</a></p><p><a href="http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html">http://www.ruanyifeng.com/blog/2018/09/hash-collision-and-birthday-attack.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;哈希函数&quot;&gt;&lt;a href=&quot;#哈希函数&quot; class=&quot;headerlink&quot; title=&quot;哈希函数&quot;&gt;&lt;/a&gt;哈希函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;（Hash function）又叫散列算法，它在广泛应用在计算机程序中，是我们需要掌握的基础知识。可以把&lt;strong&gt;哈希函数&lt;/strong&gt;看成是一个黑盒，它接收一个输入，然后通过算法对输入进行处理后输出一个结果。具体算法有好有坏，但初衷都是要将数据压缩成较短的固定长度的数据摘要，并且希望任何不同输入都有不同的输出。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="https://github.com/smilingmiao/2018/12/11/mysql-part-one/"/>
    <id>https://github.com/smilingmiao/2018/12/11/mysql-part-one/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2020-05-17T16:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很早之前的笔记</p></blockquote><p>Mac 自带的终端就可以直接执行 SQL 语句进行数据库 sqlite 数据库的创建。</p><span id="more"></span><p>1、检查环境。在 Mac 终端里输入 <code>sqlite3 --version</code> 并回车来查看一下 Mac 是否有 <code>sqlite</code> 环境，出现如图的界面就说明是有的。</p><img src="/2018/12/11/mysql-part-one/step01.png" class=""><p>2、建数据库。随便在一个文件夹目录下输入 <code>sqlite3 sqlite.db</code> 并回车来创建一个名为 <code>sqlite</code> 的数据库。此时在文件夹下是看不到这个数据库的，因为这个数据库是空的，存在没有意义。如果想知道具体的一些 SQL 语句可以根据提示输入 <code>.help</code> 回车查看。</p><img src="/2018/12/11/mysql-part-one/step02.png" class=""><p>3、建表。顺着第 2 步继续输入 <code>CREATE TABLE IF NOT EXISTS customs(id VARCHAR(20) PRIMARY KEY NOT NULL, name TEXT NOT NULL, age INT CHECK(age&gt;5), height FLOAT(3,2) DEFAULT 000.00);</code> 进行建表。如果不确定 MySQL 的一些数据类型，可以在 <a href="http://www.w3school.com.cn/sql/sql_datatypes.asp">这里</a> 查看。</p><img src="/2018/12/11/mysql-part-one/step03.png" class=""><p>至此，你的表已经建好了。由于建好了表，上面建的数据库这时候也显示出来了。如果想查看这个表的结构，你可以用可视化工具 <a href="http://sqlitebrowser.org/">DB Browser for SQLite</a> 来查看。</p><img src="/2018/12/11/mysql-part-one/step04.png" class=""><p>这里有必要说一下，如果你中途退出了终端，想要继续对数据库进行 SQL 语句操作，那么仍只需要执行一下 <code>sqlite3 sqlite.db</code> 即可。<code>sqlite.db</code> 就是之前我们创建好的数据库。</p><p><strong>插入数据。</strong>（增）</p><p>输入 <code>INSERT INTO customs(id, name, age, height) VALUES(000001, Tom, 23, 178.88);</code> 回车后发现 <code>Error</code> 了。</p><img src="/2018/12/11/mysql-part-one/step05.png" class=""><p>这是因为 <code>name</code> 列是 <code>TEXT</code> 数据类型的，我们在插入数据值时要加上引号才行。</p><img src="/2018/12/11/mysql-part-one/step06.png" class=""><p>执行成功了，这时候用可视化工具看一下，发现刚才的数据已经插入了表中。这里当然你可以执行 SQL 语句查询。</p><img src="/2018/12/11/mysql-part-one/step07.png" class=""><p>一次插入多条数据。</p><img src="/2018/12/11/mysql-part-one/step08.png" class=""><p><strong>查询数据。</strong></p><p>通过 <code>.help</code> 命令会出现很多的语句，可以根据需要来执行操作。</p><p>使用 SQL 语句查询数据，首先我们调一下显示的 <code>mode</code>，分别有 <code>.mode.line</code> 和 <code>.mode.column</code> 以及 <code>.mode.list</code>。按个人喜好的格式显示即可。</p><p>当然了，你还可以使用 <code>.header on</code> 或者 <code>.header off</code> 来显示或者隐藏表中的列名。</p><img src="/2018/12/11/mysql-part-one/step09.png" class=""><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;很早之前的笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mac 自带的终端就可以直接执行 SQL 语句进行数据库 sqlite 数据库的创建。&lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>操作系统部分基础知识</title>
    <link href="https://github.com/smilingmiao/2018/12/11/operating-system-basics/"/>
    <id>https://github.com/smilingmiao/2018/12/11/operating-system-basics/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2020-05-17T16:18:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>很早之前的笔记，比较零散的放在电脑上，今天归整到一起。（貌似中间电脑搞坏还丢了一些，又没备份）</p></blockquote><span id="more"></span><h4 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h4><p>Concurrent 并发：同一时间段内执行多条指令<br>Parallel 并行：同一时刻执行多条指令</p><h4 id="读写数据"><a href="#读写数据" class="headerlink" title="读写数据"></a>读写数据</h4><p>读写数据操作不是由 CPU 负责，而是由 CUP 发一条指令给磁盘控制器，等待着由控制器来完成，这用到了 CUP 的中断。当控制器完成操作后通知 CUP，让 CUP 接着进行相应未完成的操作。控制器有一块缓存区，用于临时存放从磁盘读入的数据。</p><h4 id="中断源和中断"><a href="#中断源和中断" class="headerlink" title="中断源和中断"></a>中断源和中断</h4><p>中断源：引起中断的事件叫中断源。</p><p>中断：中断发生时，保持中断状态（处理程序的入口地址）的值，通过任务完成时返回中断限量值来继续执行任务。中断分为多种优先级，可以嵌套。</p><p>Trap：自陷，是程序的自我中断，是一种主动发生的情况。</p><p>系统通过 polling，即 CUP 轮询的方式来查看中断源，进行需要执行的任务。（这是一种老式的处理方式）</p><p>现在通常使用保存在 RAM 高地址上的限制变量来方便地获取到中断发生的入口地址。</p><h4 id="RAM-Random-Access-Memory-amp-ROM-Read-Only-Memory-amp-DMA-Direct-Memory-Access"><a href="#RAM-Random-Access-Memory-amp-ROM-Read-Only-Memory-amp-DMA-Direct-Memory-Access" class="headerlink" title="RAM(Random Access Memory) &amp; ROM(Read Only Memory) &amp; DMA(Direct Memory Access)"></a>RAM(Random Access Memory) &amp; ROM(Read Only Memory) &amp; DMA(Direct Memory Access)</h4><p>RAM，断电即丢失数据<br>SRAM：静态 RAM<br>DRAM：动态 RAM</p><p>ROM：一次写入，反复读取。分为一次性固话，光擦除，电擦除。</p><p>DMA：直接访问内存，包括磁盘、U盘、硬盘等都是这样的处理方式。</p><blockquote><p>速度（由高到低）</p></blockquote><p>Disk - Memory - Cache - Register</p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>操作系统是一个全时运行的程序，管理控制系统资源，合理组织计算机工作流程，方便用户使用计算机程序集合。</p><p><strong>分时系统和实时系统</strong></p><p>分时系统：通用系统<br>交互性：多道<br>及时性：独占性</p><p>实时操作系统：专用系统<br>时间要求非常严格，分为硬实时和软实时<br>交互性：多道<br>及时性：独占性</p><p>卫生发射等对时间精确要求严格的任务使用实时系统，一般来说使用双工，即两台一模一样的计算机同时工作，同一时间执行相同的指令，相当于备份。</p><p><strong>双模式</strong><br>1.用户模式&#x2F;用户态  2.kernel模式&#x2F;管理态</p><p><strong>指令</strong><br>1.特权指令  2.非特权指令</p><p><strong>PCB</strong><br>PCB（Process Control Block）包括了 Base Address 和 Address Length</p><h4 id="操作系统服务"><a href="#操作系统服务" class="headerlink" title="操作系统服务"></a>操作系统服务</h4><ul><li>用户接口 <ul><li>Command Line Interface (<strong>CLI</strong>)</li><li>Graphics User Interface (<strong>GUI</strong>) </li><li>Batch （批处理）</li></ul></li><li>Program execution</li><li>I&#x2F;O operations</li><li>File-system manipulation</li><li>Communications</li><li>Error detection</li></ul><p><strong>系统调用（system call）</strong></p><p>所有库函数都是由系统调用的</p><ul><li>fork</li><li>exec</li></ul><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><p>程序是指令的集合，进程 &#x3D; 程序 + 数据 + PCB</p><p>进程：是具有独立功能的程序，关于某个数据集合的一次运行过程。</p><table><thead><tr><th align="center">区别</th><th align="center">进程</th><th align="center">程序</th></tr></thead><tbody><tr><td align="center">相同点</td><td align="center">Ready waiting  Running</td><td align="center">Ready waiting  Running</td></tr><tr><td align="center">不同点</td><td align="center">动态、生命周期、进程&#x3D;程序+数据+PCB、一个进程可包含多个程序</td><td align="center">静态、永久存在、一个程序可以对应多个进程</td></tr></tbody></table><ul><li>三个基本状态<ul><li>Running 正在运行的状态</li><li>Waiting 等待事件发生</li><li>Ready 准备就绪的状态</li></ul></li><li>PCB ( process control block ) 是一个程序控制块，它有结构主存区，包含进程执行所有信息，系统通过 PCB 感知进程，是进程存在的唯一标志。它随进程的创建而发生，随进程的消亡而消亡。PCB 可以保存中断等一系列状态信息。进程运行时候进入系统里面，创建相应的 PCB，PCB 在系统的队列里排队，受系统调度控制程序。</li></ul><h4 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h4><ul><li>new 创建</li><li>ready 就绪等待，除 CUP 外一切资源都分配完成</li><li>waiting 还没有准备好，无法执行事情</li><li>running 获得 CPU 并且运行</li><li>terminate 终止</li></ul><blockquote><p><strong>一个进程创建另外一个进程，分配资源（分配内存，创建 PCB）然后放到就绪队列。</strong></p></blockquote><h4 id="撤销进程"><a href="#撤销进程" class="headerlink" title="撤销进程"></a>撤销进程</h4><ul><li>回收 PCB</li><li>回收资源，例如：内存、输入输出</li></ul><h4 id="编译、链接、装载"><a href="#编译、链接、装载" class="headerlink" title="编译、链接、装载"></a>编译、链接、装载</h4><ul><li>编译器将源代码编译成汇编代码，汇编器将汇编代码转换成多个可执行文件，链接器将可执行文件链接成单个可执行程序，装载器再将可执行程序加载到内存并准备执行。内存中的程序将会获得操作系统的调用运行。</li><li>在汇编器将汇编代码转换成多个可执行文件时，会将源代码中的符号地址绑定为可重定位的地址，在链接的过程中，将可重定位的地址映射为绝对地址。</li></ul><p>– EOF –</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;很早之前的笔记，比较零散的放在电脑上，今天归整到一起。（貌似中间电脑搞坏还丢了一些，又没备份）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>三次握手四次挥手</title>
    <link href="https://github.com/smilingmiao/2018/12/11/three-way-handshake/"/>
    <id>https://github.com/smilingmiao/2018/12/11/three-way-handshake/</id>
    <published>2018-12-10T16:00:00.000Z</published>
    <updated>2020-05-17T16:19:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-Header"><a href="#TCP-Header" class="headerlink" title="TCP Header"></a>TCP Header</h2><img src="/2018/12/11/three-way-handshake/tcp-header.png" class=""><p>上图是一个 TCP header 来自 <a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">wikipedia</a> </p><span id="more"></span><ul><li><p>Source port (16 bits)</p><p>标识发送方端口号</p></li><li><p>Destination port (16 bits)</p><p>标识目的地端口号</p></li><li><p>Sequence number (32 bits)</p><p>具有双重作用：</p><ul><li>如果 SYN 位置为了 1，那么这就是初始序列号。实际的第一个数据字节的序号和相应 ACK 中确认的序号就是这个序号加 1。</li><li>如果 SYN 位置为了 0，那么这就是当前会话中该包的第一个数据字节的累加序列号。</li></ul></li><li><p>Acknowledgment number (32 bits)</p><p>如果 ACK 位置为了 1，那么该字段的值就是发送方期望收到的下一个序列号。这表示确认收到了先前所有的字节。两端各发送的第一个 ACK 标志(1) 确认收到了对方的初始序号，但是此时还没有实际的数据。</p></li><li><p>Data offset (4 bits)</p><p>指定 TCP header 的大小为 32 位（4 字节，也可以表示为 word，<a href="ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_9.html">这里</a>有解释）。最小的 header 是 5 words （即 20 字节），最大的是 15 words（即 60 字节）。其实这里的最大和最小的差别里填充的都是 options（如图所示）。这个字段同时代表 TCP 包起始位置到实际数据的偏移量。</p></li><li><p>Reserved (3 bits)</p><p>保留位，预防以后用得到。默认都应该设置为零。</p></li></ul><p>再来一张图，一图胜千文。这张图是用 keynote 照着 TCP&#x2F;IP详解（英文版 • 第2版）第 596 页图画的。本篇短文就围绕这张图展开讨论。</p><img src="/2018/12/11/three-way-handshake/three-way-handshake-and-four-way-waving-goodbey.png" class=""><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><p>我们知道，笼统地说，网络中传输数据就是装包和拆包的过程。整体而言，从上到下，TCP&#x2F;IP 五层协议：应用层、传输层、网络层、数据链路层、物理层。而一个数据包从应用层 (HTTP) 出发，途经下面三层，在经过每一层时加上这层的 Protocol Header 变成包。最后，在物理层将数字信号转化成光信号。到了另一端就是从下到上拆包。也就是这样：</p><img src="/2018/12/11/three-way-handshake/segment-process.png" class=""><p>如图 <strong>Active Opener</strong>（主动连接者）代表 <strong>Client</strong> 端，<strong>Passive Opener</strong>（被动连接者）代表 <strong>Server</strong> 端。下文简写为 C 和 S。忽略非必要的 options 具体握手过程解释如下：</p><ol><li>C 向 S 发送一个 SYN（即 SYN 位置为了 1）包，表示是一个请求建立连接的包。而 Seq &#x3D; ISN(c) 表示发送了初始的 Sequence Number。</li><li>S 收到 C 发来的 SYN 包，拆包后发现 SYN 位是 1，因此知道这是 C 请求建立连接包。为了表示确认收到了 C 发来的包，S 会给 C 发送一个 SYN+ACK（SYN 和 ACK 位都置为 1）包，这个包的作用既表明收到了 C 的包，同时也是包含了自己的初始 Sequence Number（Seq &#x3D; ISN(s)。ACK &#x3D; ISN(c) + 1，即 C 发来的 SYN 包里面的 Sequence Number 值加 1。这个 ACK 值恰好是 C 期望收到的发送下个包能使用的 Sequence Number。至此，C 和 S 请求建立连接的第一个包都发完了。C 发出了一个包并收到了一个确认包，但 S 却无法得知自己发出的包是否丢失。</li><li>C 再向 S 发送一个 ACK 包，Seq &#x3D; ISN(c) + 1，ACK &#x3D; ISN(s) + 1。这里的 Seq &#x3D; ISN(c) + 1 正是刚刚 S 发过来的包里的 ACK 值，而 ACK &#x3D; ISN(s) + 1 则是刚刚 S 发过来的包里的 Sequence Number（ ISN(s) ）加 1，这正是 S 期望收到的确认。</li></ol><blockquote><p>终于，三次握手完成了，这时就正式建立了连接，可以进行真正的数据传输了。</p></blockquote><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p>数据传输完成了，就挥手再见。</p><ol><li>C 向 S 发一个 FIN+ACK 包，FIN 位置为 1，表示发送的是最后一个包。Seq &#x3D; K，ACK &#x3D; L。</li><li>S 收到 C 发来的 FIN+ACK 包，拆包后发现 FIN 位为 1，知道是 C 请求关闭连接。这时 S 会首先向 C 发送一个 ACK 包。C 收到这个 <font color="dd0000">ACK</font> 包时会意识到 S 已经执行了关闭连接。通常情况下，此时应用程序会初始化关闭操作，随时准备关闭连接。（就相当于只是 new 了一个关闭操作的实体，具体关闭动作还要等调用具体实现）</li><li>紧接着<strong>被动</strong>连接的 S 端变为<strong>主动</strong>连接向 C 发一个 FIN+ACK 包，这个包和 <font color="dd0000">ACK</font> 包唯一区别只是将 FIN 位置为了 1。（和请求建立连接一样，C 向 S 请求关闭连接需要得到确认，同样 S 也要向 C 发出关闭连接请求并得到确认。）</li><li>C 收到 S 发出来的 FIN 包后，随后发出 ACK 包，这也是本次连接的最后一个包。如果 S 发出的 FIN 包在一定时间内未收到确认包就会认为丢失，将会继续重传，直到收到为止（当然这里也肯定有最大时间限制，否则会造成很大的浪费）。如果 C 在一段时间内没有收到<strong>重传</strong>的 FIN 包，则执行断开连接。</li></ol><blockquote><p>挥手完了，上面有些地方是我个人的理解，如果有错的话希望大家指出（如果这篇短文有幸被您看到的话）。</p></blockquote><h3 id="温习一下关键缩写"><a href="#温习一下关键缩写" class="headerlink" title="温习一下关键缩写"></a>温习一下关键缩写</h3><p>SYN — Synchronize sequence numbers.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Synchronize sequence numbers. Only the first packet sent from each end should have this flag set. Some other flags and fields change meaning based on this flag, and some are only valid when it is set, and others when it is clear.</span><br></pre></td></tr></table></figure><p>ACK — Acknowledgement.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">indicates that the Acknowledgment field is significant. All packets after the initial SYN packet sent by the client should have this flag set.</span><br></pre></td></tr></table></figure><p>FIN — Final connection.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last packet from sender.</span><br></pre></td></tr></table></figure><p>Seq — Sequence numbers.</p><p>ISN(c) — Initial Sequence Numbers( Client End ).</p><p>ISN(s) — initial Sequence Numbers( Server End ).</p><p>– EOF –</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol">https://en.wikipedia.org/wiki/Transmission_Control_Protocol</a></p><p><a href="ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_9.html">ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_9.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;TCP-Header&quot;&gt;&lt;a href=&quot;#TCP-Header&quot; class=&quot;headerlink&quot; title=&quot;TCP Header&quot;&gt;&lt;/a&gt;TCP Header&lt;/h2&gt;&lt;img src=&quot;/2018/12/11/three-way-handshake/tcp-header.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;上图是一个 TCP header 来自 &lt;a href=&quot;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&quot;&gt;wikipedia&lt;/a&gt; &lt;/p&gt;</summary>
    
    
    
    
    <category term="随手笔记" scheme="https://github.com/smilingmiao/tags/%E9%9A%8F%E6%89%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>记一次 CocoaPods 安装</title>
    <link href="https://github.com/smilingmiao/2018/11/14/ji-yi-ci-cocoapods-an-zhuang/"/>
    <id>https://github.com/smilingmiao/2018/11/14/ji-yi-ci-cocoapods-an-zhuang/</id>
    <published>2018-11-13T16:00:00.000Z</published>
    <updated>2020-05-17T16:14:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-CocoaPods-？"><a href="#什么是-CocoaPods-？" class="headerlink" title="什么是 CocoaPods ？"></a>什么是 CocoaPods ？</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. It has over 54 thousand libraries and is used in over 3 million apps. CocoaPods can help you scale your projects elegantly.</span><br></pre></td></tr></table></figure><p>CocoaPods 是 Swift 和 Objective-C 项目的一个依赖管理工具。它有超过 54000 个库，已经被应用于超过三百万个 app。CocoaPods 能帮助你优雅地扩展你的项目。</p><span id="more"></span><p><a href="https://www.youtube.com/watch?v=iEAjvNRdZa0&spfreload=10">这里</a> 有个视频可以帮助你更好的理解和使用 <a href="https://cocoapods.org/">CocoaPods</a></p><h3 id="替换-ruby-源"><a href="#替换-ruby-源" class="headerlink" title="替换 ruby 源"></a>替换 ruby 源</h3><p>因为在国内，所以用<a href="https://gems.ruby-china.com/">国内的源</a></p><p>在终端输入 <code>gem sources -l</code> 看一下，如果显示一片空白，那就输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/</span><br></pre></td></tr></table></figure><p>或者如果显示的是<code>https://rubygems.org/</code> 那就输入下面的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><p><strong>这个时候你在终端输入<code>gem sources -l</code> 一定是显示的<code>https://gems.ruby-china.com/</code> 了</strong></p><h3 id="安装-CocoaPods"><a href="#安装-CocoaPods" class="headerlink" title="安装 CocoaPods"></a>安装 CocoaPods</h3><p>当你在终端输入<code>gem install cocoapods</code> 回车的时候，显示的一定是报错信息。你可能看到是权限不足，于是你在网上搜到了要加上<code>sudo</code>，然后输入<code>sudo gem install cocoapods</code> 时候发现还是报错，信息还是权限不足。这个时候两个办法：</p><p>1 关闭系统的 SIP 解决。系统完整性保护（SIP，System Integrity Protection） ，你可以自己手动开启和关闭。</p><p>具体步骤：</p><ul><li><p>⌘ + R 进入恢复模式，打开终端输入 <code>sudo csrutil disable</code> 关闭 SIP。</p></li><li><p>⌘ + R 进入恢复模式，打开终端输入 <code>sudo csrutil enable</code> 开启 SIP。</p></li></ul><p>2 不给 RubyGems 特权 <a href="https://guides.cocoapods.org/using/getting-started.html#getting-started">Sudo-less installation</a></p><p>If you do <em>not</em> want to grant RubyGems admin privileges for this process, you can tell RubyGems to install into your user directory by passing either the <code>--user-install</code> flag to <code>gem install</code> or by configuring the RubyGems environment. The latter is in our opinion the best solution. To do this, create or edit the <code>.profile</code> file in your home directory and add or amend it to include these lines:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GEM_HOME=$HOME/.gem</span><br><span class="line">export PATH=$GEM_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>Note that if you choose to use the <code>--user-install</code> option, you will still have to configure your <code>.profile</code> file to set the <code>PATH</code> or use the command prepended by the full path. You can find out where a gem is installed with <code>gem which cocoapods</code>. E.g.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gem install cocoapods --user-install</span><br><span class="line">$ gem which cocoapods</span><br><span class="line">/Users/eloy/.gem/ruby/2.0.0/gems/cocoapods-0.29.0/lib/cocoapods.rb</span><br><span class="line">$ /Users/eloy/.gem/ruby/2.0.0/bin/pod install</span><br></pre></td></tr></table></figure><p>上面归纳一下步骤就是：</p><ul><li><p>在终端输入<code>sudo gem install cocoapods --user-install</code></p></li><li><p>🍉在 tom 目录下创建一个<code>.profile</code> 的文件，比如 <code>cocoapods.profile</code>。直接打开终端输入 <code>touch cocoapods.profile</code> 即可。</p></li><li><p>在 <code>cocoapods.profile</code> 文件中填入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GEM_HOME=$HOME/.gem</span><br><span class="line">export PATH=$GEM_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>终端输入 <code>gem which cocoapods</code> 命令后会出现 CocoaPods 的目录位置，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/tom/.gem/ruby/2.3.0/gems/cocoapods-1.5.3/lib/cocoapods.rb</span><br></pre></td></tr></table></figure><p>这时候你只需要用版本号之前的路径 <code>/Users/tom/.gem/ruby/2.3.0</code> 把文件 <code>cocoapods.profile</code> 中第一行的 $HOME&#x2F;.gem 替换掉即可。比如替换后为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export GEM_HOME=/Users/tom/.gem/ruby/2.3.0</span><br><span class="line">export PATH=$GEM_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li></ul><p>也可看<a href="https://github.com/rubygems/rubygems/issues/1310">这里</a> 的讨论</p><p>终于可以执行一下 pod setup 了，不过你需要到这个目录 bin 下执行</p><img src="/2018/11/14/ji-yi-ci-cocoapods-an-zhuang/cocoapods-installation.png" class=""><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/tom/.gem/ruby/2.3.0/bin/pod setup</span><br></pre></td></tr></table></figure><p>以后操作 update 或者 install 等等都需要 <code>/Users/tom/.gem/ruby/2.3.0/bin/pod</code> 后接具体命令参数。虽然这样挺麻烦的，但是我还是喜欢这种，改成全局的未免是什么好事，这样其实能加深一些理解。</p><p>更新：</p><p>用了几天还是觉得每次执行<code>pod</code>命令出现<code>zsh: command not found: pod</code>然后再执行<code>/Users/tom/.gem/ruby/2.3.0/bin/pod + 命令</code>很麻烦。花二十分钟解决了一下这个问题。原因是：当前命令的<a href="https://baike.baidu.com/item/%E8%BD%AF%E9%93%BE%E6%8E%A5">软链接</a>（例如 Windows 桌面的快捷方式）已经创建，但是软链接所在的<code>*/bin</code>路径还没有被 export。比如<code>/Users/tom/.gem/ruby/2.3.0/bin/</code>还没被 export。一句话描述：还没有配置环境变量。</p><ul><li><p>解决问题步骤：</p><ul><li>在终端输入<code>gem which cocoapods</code></li></ul><img src="/2018/11/14/ji-yi-ci-cocoapods-an-zhuang/gem-which-cocoapods.png" class=""><ul><li>执行<code>ln -s /Users/smilingmiao/.gem/ruby/2.3.0/bin/pod /usr/local/bin</code></li><li>再执行<code>source ~/.zshrc</code></li></ul></li></ul><p>🍓</p><p>更更新：</p><p>上面的 🍉 → 🍓都忽略</p><p>只要在<code>.zshrc</code>文件中加入一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$PATH:/Users/smilingmiao/.gem/ruby/2.6.0/bin&quot;</span><br></pre></td></tr></table></figure><p>– EOF –</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.jianshu.com/p/bba968ca3957">https://www.jianshu.com/p/bba968ca3957</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;什么是-CocoaPods-？&quot;&gt;&lt;a href=&quot;#什么是-CocoaPods-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 CocoaPods ？&quot;&gt;&lt;/a&gt;什么是 CocoaPods ？&lt;/h3&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects. It has over 54 thousand libraries and is used in over 3 million apps. CocoaPods can help you scale your projects elegantly.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;CocoaPods 是 Swift 和 Objective-C 项目的一个依赖管理工具。它有超过 54000 个库，已经被应用于超过三百万个 app。CocoaPods 能帮助你优雅地扩展你的项目。&lt;/p&gt;</summary>
    
    
    
    
    <category term="CocoaPods" scheme="https://github.com/smilingmiao/tags/CocoaPods/"/>
    
  </entry>
  
</feed>
